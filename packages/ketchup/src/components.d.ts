/* eslint-disable */
/* tslint:disable */
/**
 * This is an autogenerated file created by the Stencil compiler.
 * It contains typing information for all components that exist in this project.
 */
import { HTMLStencilElement, JSXBase } from "@stencil/core/internal";
import { ComponentListElement, ItemsDisplayMode } from "./components/kup-list/kup-list-declarations";
import { GenericObject } from "./types/GenericTypes";
import { KupStore } from "./components/kup-state/kup-store";
import { Cell, Column, DataTable, EventHandlerDetails, GroupLabelDisplayMode, GroupObject, KupDataTableCellButtonClick, KupDataTableCellTextFieldInput, LoadMoreMode, PaginatorPos, Row, RowAction, SelectionMode, ShowGrid, SortObject, TableData, TotalsMap } from "./components/kup-data-table/kup-data-table-declarations";
import { BoxKanban, BoxRow, Layout } from "./components/kup-box/kup-box-declarations";
import { EventHandlerDetails as EventHandlerDetails1, TreeNode, TreeNodePath } from "./components/kup-tree/kup-tree-declarations";
import { FButtonStyling } from "./f-components/f-button/f-button-declarations";
import { CardData, CardFamily } from "./components/kup-card/kup-card-declarations";
import { ChartAspect, ChartAxis, ChartClickedEvent, ChartOfflineMode, ChartSerie, ChartTitle, ChartType } from "./components/kup-chart/kup-chart-declarations";
import { FChipData, FChipType } from "./f-components/f-chip/f-chip-declarations";
import { KupObj } from "./utils/kup-objects/kup-objects-declarations";
import { CrudCallBackOnFormEventResult, CrudConfig, CrudRecord, CrudRecordsChanged } from "./components/kup-crud/kup-crud-declarations";
import { FormActionEventDetail, FormActions, FormCells, FormConfig, FormFieldEventDetail, FormFields, FormMessage, FormSection } from "./components/kup-form/kup-form-declarations";
import { SearchFilterSubmittedEventDetail, SearchSelectionUpdatedEventDetail } from "./components/kup-search/kup-search-declarations";
import { GenericFilter } from "./utils/filters/filters-declarations";
import { EchartTitle } from "./components/kup-echart/kup-echart-declarations";
import { KupFldChangeEvent, KupFldSubmitEvent } from "./components/kup-field/kup-field-declarations";
import { KupBadge } from "./components/kup-badge/kup-badge";
import { FImageData } from "./f-components/f-image/f-image-declarations";
import { MagicBoxData } from "./components/kup-magic-box/kup-magic-box-declarations";
import { ComponentNavBarData, ComponentNavBarMode } from "./components/kup-nav-bar/kup-nav-bar-declarations";
import { PaginatorMode } from "./components/kup-paginator/kup-paginator-declarations";
import { KupQlikGrid, QlikServer } from "./components/kup-qlik/kup-qlik-declarations";
import { ComponentRadioElement } from "./components/kup-radio/kup-radio-declarations";
import { ComponentTabBarElement } from "./components/kup-tab-bar/kup-tab-bar-declarations";
import { TooltipAction, TooltipCellOptions, TooltipData, TooltipDetailData, TooltipObject, TooltipRelatedObject } from "./components/kup-tooltip/kup-tooltip-declarations";
import { KupTree } from "./components/kup-tree/kup-tree";
import { UploadProps } from "./components/kup-upload/kup-upload-declarations";
export namespace Components {
    interface KupAutocomplete {
        /**
          * Function that can be invoked when the filter is updated, but only if in serverHandledFilter mode. It returns the items filtered.
         */
        "callBackOnFilterUpdate": (detail: {
        filter: string;
        matchesMinimumCharsRequired: boolean;
        el: EventTarget;
    }) => Promise<any[]> | undefined;
        /**
          * Custom style of the component. For more information: https://ketchup.smeup.com/ketchup-showcase/#/customization
         */
        "customStyle": string;
        /**
          * Props of the sub-components.
         */
        "data": Object;
        /**
          * Defaults at false. When set to true, the component is disabled.
         */
        "disabled": boolean;
        /**
          * Sets how to show the selected item value. Suported values: "code", "description", "both".
         */
        "displayMode": ItemsDisplayMode;
        /**
          * Used to retrieve component's props values.
          * @param descriptions - When provided and true, the result will be the list of props with their description.
          * @returns List of props as object, each key will be a prop.
         */
        "getProps": (descriptions?: boolean) => Promise<GenericObject>;
        "getValue": () => Promise<string>;
        /**
          * Sets the initial value of the component.
         */
        "initialValue": string;
        /**
          * The minimum number of chars to trigger the autocomplete
         */
        "minimumChars": number;
        /**
          * This method is used to trigger a new render of the component.
         */
        "refresh": () => Promise<void>;
        /**
          * Sets how to return the selected item value. Suported values: "code", "description", "both".
         */
        "selectMode": ItemsDisplayMode;
        /**
          * When true, it will emit events to inform the listener of the change of the current filter value. Also the component builtin filter will be disabled.
         */
        "serverHandledFilter": boolean;
        "setFocus": () => Promise<void>;
        "setValue": (value: string) => Promise<void>;
    }
    interface KupBadge {
        /**
          * Custom style of the component. For more information: https://ketchup.smeup.com/ketchup-showcase/#/customization
         */
        "customStyle": string;
        /**
          * Used to retrieve component's props values.
          * @param descriptions - When provided and true, the result will be the list of props with their description.
          * @returns List of props as object, each key will be a prop.
         */
        "getProps": (descriptions?: boolean) => Promise<GenericObject>;
        /**
          * The data of the image displayed inside the badge.
         */
        "imageData": {};
        /**
          * This method is used to trigger a new render of the component.
         */
        "refresh": () => Promise<void>;
        /**
          * The text displayed inside the badge.
         */
        "text": string;
    }
    interface KupBox {
        /**
          * Data of the card linked to the box when the latter's layout must be a premade template.
         */
        "cardData": GenericObject;
        /**
          * Number of columns
         */
        "columns": number;
        /**
          * Custom style of the component. For more information: https://ketchup.smeup.com/ketchup-showcase/#/customization
         */
        "customStyle": string;
        /**
          * Data
         */
        "data": { columns?: Column[]; rows?: BoxRow[] };
        /**
          * Enable dragging
         */
        "dragEnabled": boolean;
        /**
          * Enable dropping
         */
        "dropEnabled": boolean;
        /**
          * Drop can be done in section
         */
        "dropOnSection": boolean;
        /**
          * If enabled, a button to load / display the row actions will be displayed on the right of every box
         */
        "enableRowActions": boolean;
        /**
          * Used to retrieve component's props values.
          * @param descriptions - When provided and true, the result will be the list of props with their description.
          * @returns List of props as object, each key will be a prop.
         */
        "getProps": (descriptions?: boolean) => Promise<GenericObject>;
        /**
          * When set to true it activates the global filter.
         */
        "globalFilter": boolean;
        /**
          * The value of the global filter.
         */
        "globalFilterValue": string;
        /**
          * Displays the boxlist as a Kanban.
         */
        "kanban": BoxKanban;
        /**
          * How the field will be displayed. If not present, a default one will be created.
         */
        "layout": Layout;
        "loadRowActions": (row: BoxRow, actions: RowAction[]) => Promise<void>;
        /**
          * Enable multi selection
         */
        "multiSelection": boolean;
        /**
          * Current page number
         */
        "pageSelected": number;
        /**
          * Number of boxes per page
         */
        "pageSize": number;
        /**
          * Enables pagination
         */
        "pagination": boolean;
        /**
          * This method is used to trigger a new render of the component.
         */
        "refresh": () => Promise<void>;
        /**
          * Number of current rows per page
         */
        "rowsPerPage": number;
        /**
          * Activates the scroll on hover function.
         */
        "scrollOnHover": boolean;
        /**
          * Automatically selects the box at the specified index
         */
        "selectBox": number;
        /**
          * Multiple selection
         */
        "selectedRowsState": string;
        /**
          * If enabled, highlights the selected box/boxes
         */
        "showSelection": boolean;
        /**
          * If set to true, displays tooltip on right click; if set to false, displays tooltip on mouseOver.
         */
        "showTooltipOnRightClick": boolean;
        /**
          * If sorting is enabled, specifies which column to sort
         */
        "sortBy": string;
        /**
          * Enable sorting
         */
        "sortEnabled": boolean;
        "stateId": string;
        "store": KupStore;
        /**
          * Disable swipe
         */
        "swipeDisabled": boolean;
        /**
          * Defines the timeout for tooltip detail
         */
        "tooltipDetailTimeout": number;
        /**
          * Enable show tooltip
         */
        "tooltipEnabled": boolean;
        /**
          * Defines the timeout for tooltip load
         */
        "tooltipLoadTimeout": number;
    }
    interface KupBtn {
        /**
          * Number of columns for draw sub-components.
         */
        "columns": number;
        /**
          * Custom style of the component. For more information: https://ketchup.smeup.com/ketchup-showcase/#/customization
         */
        "customStyle": string;
        /**
          * Props of the sub-components.
         */
        "data": TreeNode[];
        /**
          * Default at false. When set to true, the sub-components are disabled.
         */
        "disabled": boolean;
        /**
          * Used to retrieve component's props values.
          * @param descriptions - When provided and true, the result will be the list of props with their description.
          * @returns List of props as object, each key will be a prop.
         */
        "getProps": (descriptions?: boolean) => Promise<GenericObject>;
        /**
          * This method is used to trigger a new render of the component.
         */
        "refresh": () => Promise<void>;
        /**
          * If enabled, highlights the selected button
         */
        "showSelection": boolean;
        /**
          * Defines the style of the buttons. Available styles are "flat" and "outlined", "raised" is the default. If set, will be valid for all sub-components.
         */
        "styling": string;
    }
    interface KupButton {
        /**
          * When set to true, the icon button state will be on.
          * @default false
         */
        "checked": boolean;
        /**
          * Custom style of the component.
          * @default ""
          * @see https ://ketchup.smeup.com/ketchup-showcase/#/customization
         */
        "customStyle": string;
        /**
          * Defaults at false. When set to true, the component is disabled.
          * @default false
         */
        "disabled": boolean;
        /**
          * Used to retrieve component's props values.
          * @param descriptions - When provided and true, the result will be the list of props with their description.
          * @returns List of props as object, each key will be a prop.
         */
        "getProps": (descriptions?: boolean) => Promise<GenericObject>;
        /**
          * When set, the button will show this icon.
          * @default null
         */
        "icon": string;
        /**
          * When set, the icon button off state will show this icon. Otherwise, an outlined version of the icon prop will be displayed.
          * @default null
         */
        "iconOff": string;
        /**
          * When set, the button will show this text.
          * @default null
         */
        "label": string;
        /**
          * This method is used to trigger a new render of the component.
         */
        "refresh": () => Promise<void>;
        /**
          * Defines the style of the button. Styles available: "flat", "outlined" and "raised" which is also the default.
          * @default FButtonStyling.RAISED
         */
        "styling": FButtonStyling;
        /**
          * When set to true, the icon button will be toggable on/off.
          * @default false
         */
        "toggable": boolean;
        /**
          * When set, the icon will be shown after the text.
          * @default false
         */
        "trailingIcon": boolean;
    }
    interface KupCalendar {
        "data": DataTable;
        "dateCol": string;
        "descrCol": string;
        "endCol": string;
        "hideNavigation": boolean;
        "iconCol": string;
        "imageCol": string;
        "initialDate": string;
        "startCol": string;
        "styleCol": string;
        "weekView": boolean;
    }
    interface KupCard {
        /**
          * Custom style of the component.
          * @default ""
          * @see https ://ketchup.smeup.com/ketchup-showcase/#/customization
         */
        "customStyle": string;
        /**
          * The actual data of the card.
          * @default null
         */
        "data": CardData;
        /**
          * Used to retrieve component's props values.
          * @param descriptions - When provided and true, the result will be the list of props with their description.
          * @returns List of props as object, each key will be a prop.
         */
        "getProps": (descriptions?: boolean) => Promise<GenericObject>;
        /**
          * Defines whether the card is a menu or not. Works together with menuVisible.
          * @default false
         */
        "isMenu": boolean;
        /**
          * Sets the type of the card.
          * @default CardFamily.STANDARD
         */
        "layoutFamily": CardFamily;
        /**
          * Sets the number of the layout.
          * @default 1
         */
        "layoutNumber": number;
        /**
          * Sets the status of the card as menu, when false it's hidden otherwise it's visible. Works together with isMenu.
          * @default false
         */
        "menuVisible": boolean;
        /**
          * This method is used to trigger a new render of the component.
         */
        "refresh": () => Promise<void>;
        /**
          * This method is invoked by KupManager whenever the component changes size.
         */
        "resizeCallback": () => Promise<void>;
        /**
          * The width of the card, defaults to 100%. Accepts any valid CSS format (px, %, vw, etc.).
          * @default "100%"
         */
        "sizeX": string;
        /**
          * The height of the card, defaults to 100%. Accepts any valid CSS format (px, %, vh, etc.).
          * @default "100%"
         */
        "sizeY": string;
    }
    interface KupChart {
        /**
          * Sets the chart to a 2D or 3D aspect. 3D only works for Pie graphs.
         */
        "asp": ChartAspect;
        /**
          * Sets the axis of the chart.
         */
        "axis": string;
        /**
          * Title of the graph.
         */
        "chartTitle": ChartTitle;
        /**
          * Colors of the chart.
         */
        "colors": string[];
        /**
          * Custom style of the component. For more information: https://ketchup.smeup.com/ketchup-showcase/#/customization.
         */
        "customStyle": string;
        /**
          * The actual data of the chart.
         */
        "data": DataTable;
        /**
          * Used to retrieve component's props values.
          * @param descriptions - When provided and true, the result will be the list of props with their description.
          * @returns List of props as object, each key will be a prop.
         */
        "getProps": (descriptions?: boolean) => Promise<GenericObject>;
        /**
          * Customize the hAxis.
         */
        "hAxis": ChartAxis;
        /**
          * Sets the position of the legend. Supported values: bottom, labeled, left, none, right, top. Keep in mind that legend types are tied to chart types, some combinations might not work.
         */
        "legend": string;
        /**
          * Renders charts without the Google API and using jQuery Sparkline.
         */
        "offlineMode": ChartOfflineMode;
        /**
          * This method is used to trigger a new render of the component.
         */
        "refresh": () => Promise<void>;
        /**
          * This method is invoked by KupManager whenever the component changes size.
         */
        "resizeCallback": () => Promise<void>;
        /**
          * The data series to be displayed. They must be of the same type.
         */
        "series": ChartSerie[];
        /**
          * Displays the numerical values.
         */
        "showMarks": boolean;
        /**
          * The width of the chart, defaults to 100%. Accepts any valid CSS format (px, %, vw, etc.).
         */
        "sizeX": string;
        /**
          * The height of the chart, defaults to 100%. Accepts any valid CSS format (px, %, vh, etc.).
         */
        "sizeY": string;
        /**
          * Displays the data columns of an object on top of each other.
         */
        "stacked": boolean;
        /**
          * The type of the chart. Supported formats: Area, Bubble, Cal, Candlestick, Combo, Geo, Hbar, Line, Ohlc, Pie, Sankey, Scatter, Unk, Vbar.
         */
        "types": ChartType[];
        /**
          * Customize the vAxis.
         */
        "vAxis": ChartAxis;
        /**
          * Google chart version to load
         */
        "version": string;
    }
    interface KupCheckbox {
        /**
          * Defaults at false. When set to true, the component will be set to 'checked'.
          * @default false
         */
        "checked": boolean;
        /**
          * Custom style of the component.
          * @default ""
          * @see https ://ketchup.smeup.com/ketchup-showcase/#/customization
         */
        "customStyle": string;
        /**
          * When set to true, the component is disabled.
          * @default false
         */
        "disabled": boolean;
        /**
          * Used to retrieve component's props values.
          * @param descriptions - When provided and true, the result will be the list of props with their description.
          * @returns List of props as object, each key will be a prop.
         */
        "getProps": (descriptions?: boolean) => Promise<GenericObject>;
        /**
          * When set to true, the component will be set to 'indeterminate'.
          * @default false
         */
        "indeterminate": boolean;
        /**
          * When specified, its content will be shown as a label.
          * @default null
         */
        "label": string;
        /**
          * When set to true, the label will be on the left of the component.
          * @default false
         */
        "leadingLabel": boolean;
        /**
          * This method is used to trigger a new render of the component.
         */
        "refresh": () => Promise<void>;
    }
    interface KupChip {
        /**
          * Custom style of the component.
          * @default ""
          * @see https ://ketchup.smeup.com/ketchup-showcase/#/customization
         */
        "customStyle": string;
        /**
          * List of elements.
          * @deprecated soon to be replaced by TreeNode[]
          * @default []
         */
        "data": FChipData[];
        /**
          * List of elements.
          * @default []
         */
        "dataNew": TreeNode[];
        /**
          * Used to retrieve component's props values.
          * @param descriptions - When provided and true, the result will be the list of props with their description.
          * @returns List of props as object, each key will be a prop.
         */
        "getProps": (descriptions?: boolean) => Promise<GenericObject>;
        /**
          * This method is used to trigger a new render of the component.
         */
        "refresh": () => Promise<void>;
        /**
          * The type of chip. Available types: input, filter, choice or empty for default.
          * @default FChipType.STANDARD
         */
        "type": FChipType;
    }
    interface KupColorPicker {
        /**
          * Custom style of the component. For more information: https://ketchup.smeup.com/ketchup-showcase/#/customization
         */
        "customStyle": string;
        /**
          * Props of the text field.
         */
        "data": Object;
        /**
          * Defaults at false. When set to true, the component is disabled.
         */
        "disabled": boolean;
        /**
          * Used to retrieve component's props values.
          * @param descriptions - When provided and true, the result will be the list of props with their description.
          * @returns List of props as object, each key will be a prop.
         */
        "getProps": (descriptions?: boolean) => Promise<GenericObject>;
        "getValue": () => Promise<string>;
        /**
          * Sets the initial value of the component. Can be css color name, hex code or rgb code (sample: "red" or rgb(255, 0, 0) or "#FF0000" ).
         */
        "initialValue": string;
        /**
          * This method is used to trigger a new render of the component.
         */
        "refresh": () => Promise<void>;
        "setFocus": () => Promise<void>;
        "setValue": (value: string) => Promise<void>;
        /**
          * When true, the component's text field will be replaced by a swatch.
         */
        "swatchOnly": boolean;
    }
    interface KupCombobox {
        /**
          * Custom style of the component. For more information: https://ketchup.smeup.com/ketchup-showcase/#/customization
         */
        "customStyle": string;
        /**
          * Props of the sub-components (date input text field).
         */
        "data": Object;
        /**
          * Defaults at false. When set to true, the component is disabled.
         */
        "disabled": boolean;
        /**
          * Sets how to show the selected item value. Suported values: "code", "description", "both".
         */
        "displayMode": ItemsDisplayMode;
        /**
          * Used to retrieve component's props values.
          * @param descriptions - When provided and true, the result will be the list of props with their description.
          * @returns List of props as object, each key will be a prop.
         */
        "getProps": (descriptions?: boolean) => Promise<GenericObject>;
        "getValue": () => Promise<string>;
        /**
          * Sets the initial value of the component
         */
        "initialValue": string;
        /**
          * Lets the combobox behave as a select element.
         */
        "isSelect": boolean;
        /**
          * This method is used to trigger a new render of the component.
         */
        "refresh": () => Promise<void>;
        /**
          * Sets how to return the selected item value. Suported values: "code", "description", "both".
         */
        "selectMode": ItemsDisplayMode;
        "setFocus": () => Promise<void>;
        "setValue": (value: string) => Promise<void>;
    }
    interface KupCrud {
        "actions": FormActions;
        "autocompleteCallBackOnFilterUpdate": (detail: {
        filter: string;
        matchesMinimumCharsRequired: boolean;
        el: EventTarget;
    }) => Promise<any[]> | undefined;
        "closeForm": () => Promise<void>;
        "config": CrudConfig;
        "crudCallBackOnFormActionSubmitted": (
        detail: FormActionEventDetail
    ) => Promise<CrudCallBackOnFormEventResult> | undefined;
        "crudCallBackOnFormFieldChanged": (
        detail: FormFieldEventDetail
    ) => Promise<CrudCallBackOnFormEventResult> | undefined;
        "disabled": boolean;
        "extra": any;
        "extraMessages": FormMessage[];
        "fields": FormFields;
        "openForm": () => Promise<void>;
        "records": CrudRecord[];
        "refid": string;
        "searchCallBackOnFilterSubmitted": (
        detail: SearchFilterSubmittedEventDetail
    ) => Promise<TableData> | undefined;
        "sections": FormSection;
    }
    interface KupDash {
        /**
          * The component can be clicked.
         */
        "active": boolean;
        /**
          * Sets the font size of the component.
         */
        "fontsize": string;
        /**
          * No idea what this is about.
         */
        "index": number;
        /**
          * Sets the layout of the component.
         */
        "layout": string;
    }
    interface KupDashList {
        "active": boolean;
        "columnsNumber": number;
        "data": TableData;
        "fontsize": string;
        "fullWidth": boolean;
        "horizontal": boolean;
        "iconColor": Array<any>;
        "layout": string;
        "textColor": Array<any>;
        "valueColor": Array<any>;
    }
    interface KupDataTable {
        /**
          * Closes any opened column menu.
         */
        "closeColumnMenu": () => Promise<void>;
        "collapseAll": () => Promise<void>;
        /**
          * Custom style of the component. For more information: https://ketchup.smeup.com/ketchup-showcase/#/customization
         */
        "customStyle": string;
        /**
          * The data of the table.
         */
        "data": TableData;
        "defaultSortingFunction": (columns: Column[], receivingColumnIndex: number, sortedColumnIndex: number, useNewObject?: boolean) => Promise<Column[]>;
        /**
          * The density of the rows, defaults at 'medium' and can be also set to 'large' or 'small'.
         */
        "density": string;
        /**
          * Enable row dragging
         */
        "dragEnabled": boolean;
        /**
          * Enable record dropping
         */
        "dropEnabled": boolean;
        /**
          * When set to true, editable cells will be rendered using input components.
          * @default false
         */
        "editableData": boolean;
        /**
          * Defines the label to show when the table is empty.
         */
        "emptyDataLabel": string;
        /**
          * Enables the extracolumns add buttons.
         */
        "enableExtraColumns": boolean;
        /**
          * Enables the sorting of columns by dragging them into different columns.
         */
        "enableSortableColumns": boolean;
        "expandAll": () => Promise<void>;
        /**
          * Expands groups when set to true.
         */
        "expandGroups": boolean;
        /**
          * List of filters set by the user.
         */
        "filters": GenericFilter;
        /**
          * Fixes the given number of columns so that they stay visible when horizontally scrolling the data-table. If grouping is active or the value of the prop is <= 0, this prop will have no effect. Can be combined with fixedRows.
          * @see fixedRows
         */
        "fixedColumns": number;
        /**
          * Fixes the given number of rows so that they stay visible when vertically scrolling the data-table. If grouping is active or the value of the prop is <= 0, this prop will have no effect. Can be combined with fixedColumns.
          * @see fixedColumns
         */
        "fixedRows": number;
        /**
          * Forces cells with long text and a fixed column size to have an ellipsis set on their text. The reflect attribute is mandatory to allow styling.
         */
        "forceOneLine": boolean;
        "getInternalState": () => Promise<{ groups: GroupObject[]; filters: GenericFilter; data: TableData; }>;
        /**
          * Used to retrieve component's props values.
          * @param descriptions - When provided and true, the result will be the list of props with their description.
          * @returns List of props as object, each key will be a prop.
         */
        "getProps": (descriptions?: boolean) => Promise<GenericObject>;
        /**
          * When set to true it activates the global filter.
         */
        "globalFilter": boolean;
        /**
          * The value of the global filter.
         */
        "globalFilterValue": string;
        /**
          * How the label of a group must be displayed. For available values [see here]{@link GroupLabelDisplayMode}
         */
        "groupLabelDisplay": GroupLabelDisplayMode;
        /**
          * The list of groups.
         */
        "groups": Array<GroupObject>;
        /**
          * When set to true the header will stick on top of the table when scrolling.
         */
        "headerIsPersistent": boolean;
        /**
          * When set to true, clicked-on rows will have a visual feedback.
          * @default false
         */
        "isFocusable": boolean;
        /**
          * When set to true, extra rows will be automatically loaded once the last row enters the viewport. When groups are present, the number of rows is referred to groups and not to their content. Paginator is disabled.
         */
        "lazyLoadRows": boolean;
        /**
          * Defines the placeholder character which will be replaced by a line break inside table header cells, normal or sticky.
         */
        "lineBreakCharacter": string;
        /**
          * Sets a maximum limit of new records which can be required by the load more functionality.
         */
        "loadMoreLimit": number;
        /**
          * Establish the modality of how many new records will be downloaded.  This property is regulated also by loadMoreStep.
          * @see loadMoreStep *
          * @see loadMoreLimit
         */
        "loadMoreMode": LoadMoreMode;
        /**
          * The number of records which will be requested to be downloaded when clicking on the load more button.  This property is regulated also by loadMoreMode.
          * @see loadMoreMode *
          * @see loadMoreLimit
         */
        "loadMoreStep": number;
        /**
          * Opens the column menu of the given column.
          * @param column - Name of the column.
         */
        "openColumnMenu": (column: string) => Promise<void>;
        /**
          * Current selected page set on component load
         */
        "pageSelected": number;
        /**
          * Sets the position of the paginator. Available positions: top, bottom or both.
         */
        "paginatorPos": PaginatorPos;
        /**
          * This method is used to trigger a new render of the component.
         */
        "refresh": () => Promise<void>;
        /**
          * Sets the possibility to remove the selected column.
         */
        "removableColumns": boolean;
        /**
          * This method is invoked by KupManager whenever the component changes size.
         */
        "resizeCallback": () => Promise<void>;
        /**
          * Sets the actions of the rows.
         */
        "rowActions": Array<RowAction>;
        /**
          * Sets the number of rows per page to display.
         */
        "rowsPerPage": number;
        /**
          * Activates the scroll on hover function.
         */
        "scrollOnHover": boolean;
        /**
          * Selects the row at the specified rendered rows prosition (base 1).
         */
        "selectRow": number;
        /**
          * Semicolon separated rows id to select.
         */
        "selectRowsById": string;
        /**
          * Set the type of the rows selection.
         */
        "selection": SelectionMode;
        /**
          * This method will set the selected rows of the component.
          * @param rowsById - String containing the ids separated by ";".
          * @param emitEvent - The event will always be emitted unless emitEvent is set to false.
         */
        "setSelectedRows": (rowsById: string, emitEvent?: boolean) => Promise<void>;
        /**
          * If set to true, displays the button to open the customization panel.
         */
        "showCustomization": boolean;
        /**
          * When set to true enables the column filters.
         */
        "showFilters": boolean;
        /**
          * When set to true shows the footer.
         */
        "showFooter": boolean;
        /**
          * Can be used to customize the grid view of the table.
         */
        "showGrid": ShowGrid;
        /**
          * When set to true enables the column grouping.
         */
        "showGroups": boolean;
        /**
          * Enables rendering of the table header.
          * @namespace KupDataTable.showHeader
         */
        "showHeader": boolean;
        /**
          * If set to true, displays the button to load more records.
         */
        "showLoadMore": boolean;
        /**
          * If set to true, displays tooltip on right click; if set to false, displays tooltip on mouseOver.
         */
        "showTooltipOnRightClick": boolean;
        /**
          * Defines the current sorting options.
         */
        "sort": Array<SortObject>;
        /**
          * When set to true enables the sorting of the columns.
         */
        "sortEnabled": boolean;
        /**
          * If set to true, when a column is dragged to be sorted, the component directly mutates the data.columns property and then fires the event
         */
        "sortableColumnsMutateData": boolean;
        "stateId": string;
        "store": KupStore;
        /**
          * Sets the height of the table.
         */
        "tableHeight": string;
        /**
          * Sets the width of the table.
         */
        "tableWidth": string;
        /**
          * Defines the timeout for tooltip detail
         */
        "tooltipDetailTimeout": number;
        /**
          * Enable show tooltip
         */
        "tooltipEnabled": boolean;
        /**
          * Defines the timeout for tooltip load
         */
        "tooltipLoadTimeout": number;
        /**
          * Defines the current totals options
         */
        "totals": TotalsMap;
        /**
          * Transposes the data of the data table
         */
        "transpose": boolean;
    }
    interface KupDatePicker {
        /**
          * Custom style of the component. For more information: https://ketchup.smeup.com/ketchup-showcase/#/customization
         */
        "customStyle": string;
        /**
          * Props of the sub-components.
         */
        "data": Object;
        /**
          * Defaults at false. When set to true, the component is disabled.
         */
        "disabled": boolean;
        /**
          * First day number (0 - sunday, 1 - monday, ...)
         */
        "firstDayIndex": number;
        /**
          * Used to retrieve component's props values.
          * @param descriptions - When provided and true, the result will be the list of props with their description.
          * @returns List of props as object, each key will be a prop.
         */
        "getProps": (descriptions?: boolean) => Promise<GenericObject>;
        "getValue": () => Promise<string>;
        /**
          * Sets the initial value of the component
         */
        "initialValue": string;
        /**
          * This method is used to trigger a new render of the component.
         */
        "refresh": () => Promise<void>;
        "setFocus": () => Promise<void>;
        "setValue": (value: string) => Promise<void>;
    }
    interface KupDrawer {
        "close": () => Promise<void>;
        /**
          * Custom style of the component. For more information: https://ketchup.smeup.com/ketchup-showcase/#/customization
         */
        "customStyle": string;
        /**
          * Used to retrieve component's props values.
          * @param descriptions - When provided and true, the result will be the list of props with their description.
          * @returns List of props as object, each key will be a prop.
         */
        "getProps": (descriptions?: boolean) => Promise<GenericObject>;
        "open": () => Promise<void>;
        /**
          * Defaults at false. When set to true, the drawer appears.
         */
        "opened": boolean;
        /**
          * This method is used to trigger a new render of the component.
         */
        "refresh": () => Promise<void>;
        "toggle": () => Promise<void>;
    }
    interface KupDropdownButton {
        /**
          * Custom style of the component. For more information: https://ketchup.smeup.com/ketchup-showcase/#/customization
         */
        "customStyle": string;
        /**
          * Props of the sub-components.
         */
        "data": Object;
        /**
          * Defaults at false. When set to true, the component is disabled.
         */
        "disabled": boolean;
        /**
          * Sets how to show the selected item value. Suported values: "code", "description", "both".
         */
        "displayMode": ItemsDisplayMode;
        /**
          * Used to retrieve component's props values.
          * @param descriptions - When provided and true, the result will be the list of props with their description.
          * @returns List of props as object, each key will be a prop.
         */
        "getProps": (descriptions?: boolean) => Promise<GenericObject>;
        "getValue": () => Promise<string>;
        /**
          * Defaults at null. When set, the button will show this icon.
         */
        "icon": string;
        /**
          * Sets the initial value of the component.
         */
        "initialValue": string;
        /**
          * Defaults at null. When set, the button will show this text.
         */
        "label": string;
        /**
          * This method is used to trigger a new render of the component.
         */
        "refresh": () => Promise<void>;
        /**
          * Sets how to return the selected item value. Suported values: "code", "description", "both".
         */
        "selectMode": ItemsDisplayMode;
        "setValue": (value: string) => Promise<void>;
        /**
          * Defines the style of the button. Styles available: "flat", "outlined" and "raised" which is also the default.
          * @default FButtonStyling.RAISED
         */
        "styling": FButtonStyling;
        /**
          * Defaults at null. When set, the icon will be shown after the text.
         */
        "trailingIcon": boolean;
    }
    interface KupEchart {
        /**
          * Sets the axis of the chart.
         */
        "axis": string;
        /**
          * Title of the graph.
         */
        "chartTitle": EchartTitle;
        /**
          * Custom style of the component. For more information: https://ketchup.smeup.com/ketchup-showcase/#/customization.
         */
        "customStyle": string;
        /**
          * The actual data of the chart.
         */
        "data": object;
        /**
          * Used to retrieve component's props values.
          * @param descriptions - When provided and true, the result will be the list of props with their description.
          * @returns List of props as object, each key will be a prop.
         */
        "getProps": (descriptions?: boolean) => Promise<GenericObject>;
        /**
          * Sets the position of the legend. Supported values: bottom, left, right, top. Keep in mind that legend types are tied to chart types, some combinations might not work.
         */
        "legend": string;
        /**
          * Choose which map you want to view, supported values: "europe", "africa", "asia", "oceania", "america" and "world". You can also provide your own JSON.
         */
        "mapType": any;
        /**
          * This method is used to trigger a new render of the component.
         */
        "refresh": () => Promise<void>;
        /**
          * This method is invoked by KupManager whenever the component changes size.
         */
        "resizeCallback": () => Promise<void>;
        /**
          * The data series to be displayed. They must be of the same type.
         */
        "series": string[];
        /**
          * The type of the chart. Supported formats: Line, Pie, Map, Scatter
         */
        "types": String[];
    }
    interface KupEditor {
        /**
          * The html to be rendered and edited
         */
        "text": string;
    }
    interface KupFab {
        "colorButton": string;
    }
    interface KupField {
        /**
          * Custom style of the component. For more information: https://ketchup.smeup.com/ketchup-showcase/#/customization
         */
        "customStyle": string;
        /**
          * Effective data to pass to the component.
         */
        "data": Object;
        /**
          * Provides an interface to get the current value programmatically
          * @method getCurrentValue
          * @returns
         */
        "getCurrentValue": () => Promise<string | object>;
        /**
          * Used to retrieve component's props values.
          * @param descriptions - When provided and true, the result will be the list of props with their description.
          * @returns List of props as object, each key will be a prop.
         */
        "getProps": (descriptions?: boolean) => Promise<GenericObject>;
        /**
          * The text of the label. If set to empty or has only white space chars, the label will be removed.
         */
        "label": string;
        /**
          * Sets the label's position, left right or top.
         */
        "labelPos": string;
        /**
          * This method is used to trigger a new render of the component.
         */
        "refresh": () => Promise<void>;
        /**
          * Sets whether the submit button must be displayed or not.
         */
        "showSubmit": boolean;
        /**
          * Sets the submit button's label.
         */
        "submitLabel": string;
        /**
          * Sets the submit button's position, top right bottom or left.
         */
        "submitPos": string;
        /**
          * The type of the FLD
         */
        "type": string;
    }
    interface KupForm {
        "actions": FormActions;
        "autocompleteCallBackOnFilterUpdate": (detail: {
        filter: string;
        matchesMinimumCharsRequired: boolean;
        el: EventTarget;
    }) => Promise<any[]> | undefined;
        "cells": FormCells;
        "config": FormConfig;
        "crudCallBackOnFormActionSubmitted": (
        detail: FormActionEventDetail
    ) => Promise<CrudCallBackOnFormEventResult> | undefined;
        "crudCallBackOnFormFieldChanged": (
        detail: FormFieldEventDetail
    ) => Promise<CrudCallBackOnFormEventResult> | undefined;
        "extra": any;
        "extraMessages": FormMessage[];
        "fields": FormFields;
        "getActualCells": () => Promise<FormCells>;
        "getOldCells": () => Promise<FormCells>;
        "refid": string;
        "searchCallBackOnFilterSubmitted": (
        detail: SearchFilterSubmittedEventDetail
    ) => Promise<TableData> | undefined;
        "sections": FormSection;
    }
    interface KupGauge {
        /**
          * Sets how much the arc of the gauge should be thick.
          * @namespace kup-gauge.arcThickness
          * @see kup-gauge.size
         */
        "arcThickness": number;
        /**
          * Array of three elements to specify the color of the arcs.
         */
        "colors": string[];
        /**
          * Custom style of the component. For more information: https://ketchup.smeup.com/ketchup-showcase/#/customization
         */
        "customStyle": string;
        /**
          * The first threshold, establishing the length of the first and second arc.
         */
        "firstThreshold"?: number;
        /**
          * Used to retrieve component's props values.
          * @param descriptions - When provided and true, the result will be the list of props with their description.
          * @returns List of props as object, each key will be a prop.
         */
        "getProps": (descriptions?: boolean) => Promise<GenericObject>;
        /**
          * The distance the label and the value has from the gauge graph.
         */
        "labelDistance": number;
        /**
          * The maximum value reachable in the current graph.
         */
        "maxValue": number;
        /**
          * A string which will be appended to the displayed values of the component.
         */
        "measurementUnit": string;
        /**
          * The minimum value reachable in the current graph.
         */
        "minValue": number;
        /**
          * When true, shows a rounded needle.
         */
        "needleCircle": boolean;
        /**
          * When true, ignore thresholds in gauge and show colored value's arc.
         */
        "onlyValue": boolean;
        /**
          * This method is used to trigger a new render of the component.
         */
        "refresh": () => Promise<void>;
        /**
          * When true, the colors inside the colors array are used in the reversed order.
         */
        "reverseColors": boolean;
        /**
          * The second threshold, establishing the length of the second and third arc.
         */
        "secondThreshold"?: number;
        /**
          * If set to false, threshold values of the gauge are not displayed.
         */
        "showLabels": boolean;
        /**
          * If set to false, the maximum and minimum values of the gauge are not displayed.
         */
        "showMaxmin": boolean;
        /**
          * If set to false, the current value of the gauge is not displayed.
         */
        "showValue": boolean;
        /**
          * Con be used change the viewbox of the SVG. By manipulating this value, some customizations of the aspect of the gauge is achievable.
          * @namespace kup-gauge.size
          * @see kup-gauge.arcThickness
         */
        "size": number;
        /**
          * The current value of the gauge. The gauge's needle points to the percentage based on this prop.
         */
        "value": number;
        /**
          * The current size of gauge's value. Correct values are: 0,1,2 or 3.
         */
        "valueSize": number;
        /**
          * Set Width gauge.
         */
        "widthComponent": string;
    }
    interface KupGrid {
        /**
          * The number of columns displayed by the grid, the default behavior is 12.
         */
        "columns": number;
        /**
          * Custom style of the component. For more information: https://ketchup.smeup.com/ketchup-showcase/#/customization
         */
        "customStyle": string;
        /**
          * Used to retrieve component's props values.
          * @param descriptions - When provided and true, the result will be the list of props with their description.
          * @returns List of props as object, each key will be a prop.
         */
        "getProps": (descriptions?: boolean) => Promise<GenericObject>;
        /**
          * This method is used to trigger a new render of the component.
         */
        "refresh": () => Promise<void>;
        /**
          * When set to true, forces the content on a single line.
         */
        "singleLine": boolean;
    }
    interface KupIframe {
        /**
          * Props of the button (when isButton is set to true).
         */
        "buttonData": Object;
        /**
          * Used to retrieve component's props values.
          * @param descriptions - When provided and true, the result will be the list of props with their description.
          * @returns List of props as object, each key will be a prop.
         */
        "getProps": (descriptions?: boolean) => Promise<GenericObject>;
        /**
          * The component will be rendered as a button, which opens the link associated to the iframe in another tab when clicked.
         */
        "isButton": boolean;
        /**
          * This method is used to trigger a new render of the component.
         */
        "refresh": () => Promise<void>;
        /**
          * The address the iframe should be referencing to.
         */
        "src": string;
    }
    interface KupImage {
        /**
          * Sets the data of badges.
          * @default null
         */
        "badgeData": KupBadge[];
        /**
          * The color of the icon, defaults to the CSS variable --kup-icon-color.
          * @default 'var(--kup-icon-color)'
         */
        "color": string;
        /**
          * Custom style of the component.
          * @default ""
          * @see https ://ketchup.smeup.com/ketchup-showcase/#/customization
         */
        "customStyle": string;
        /**
          * When present, the component will be drawn using CSS. Check the 'Drawing with CSS' section of the image showcase for more information.
          * @default null
         */
        "data": FImageData[];
        /**
          * When set to true, a spinner will be displayed until the image finished loading. Not compatible with SVGs.
          * @default false
         */
        "feedback": boolean;
        /**
          * Used to retrieve component's props values.
          * @param descriptions - When provided and true, the result will be the list of props with their description.
          * @returns List of props as object, each key will be a prop.
         */
        "getProps": (descriptions?: boolean) => Promise<GenericObject>;
        /**
          * The image component will create a canvas element on which it's possible to draw. It's a temporary feature that will be fully replaced by CSS drawing in the future.
          * @default false
         */
        "isCanvas": boolean;
        /**
          * This method is used to trigger a new render of the component.
         */
        "refresh": () => Promise<void>;
        /**
          * The resource used to fetch the image.
          * @default null
         */
        "resource": string;
        /**
          * The width of the icon, defaults to 100%. Accepts any valid CSS format (px, %, vh, etc.).
          * @default '100%'
         */
        "sizeX": string;
        /**
          * The height of the icon, defaults to 100%. Accepts any valid CSS format (px, %, vh, etc.).
          * @default '100%'
         */
        "sizeY": string;
    }
    interface KupImageButton {
        /**
          * If enabled, can select one or more images
         */
        "allowMultiSelection": boolean;
        /**
          * urls of the images
         */
        "images": any;
        /**
          * If enabled, display the image description below the image
         */
        "showDescription": boolean;
        /**
          * image dimension
         */
        "size": number;
    }
    interface KupLayout {
        /**
          * Specifies how many columns the content must be organized onto.  If this is greater than 1, then the horizontal prop will have no effect.
         */
        "columnsNumber": number;
        /**
          * By default, columns size is calculated by the grid layout and it tries to give the same space to elements.  If this is true, columns width will be calculated according to the cells content. See SCSS file for more details.
         */
        "contentBasedColumnsWidth": boolean;
        /**
          * When true, the layout and its contents will try to take all the available horizontal space.
         */
        "fillSpace": boolean;
        /**
          * Tells the layout to place all elements onto a single row. It does not work when columnsNumber is greater then 1.
         */
        "horizontal": boolean;
    }
    interface KupLazy {
        /**
          * Sets the tag name of the component to be lazy loaded.
         */
        "componentName": string;
        /**
          * Custom style of the component. For more information: https://ketchup.smeup.com/ketchup-showcase/#/customization
         */
        "customStyle": string;
        /**
          * Sets the data of the component to be lazy loaded.
         */
        "data": {};
        /**
          * Used to retrieve component's props values.
          * @param descriptions - When provided and true, the result will be the list of props with their description.
          * @returns List of props as object, each key will be a prop.
         */
        "getProps": (descriptions?: boolean) => Promise<GenericObject>;
        /**
          * This method is used to trigger a new render of the component.
         */
        "refresh": () => Promise<void>;
        /**
          * Displays an animated SVG placeholder until the component is loaded.
         */
        "showPlaceholder": boolean;
    }
    interface KupList {
        /**
          * Used to navigate the list when it's bound to a text field, i.e.: autocomplete.
         */
        "arrowDown": boolean;
        "arrowUp": boolean;
        /**
          * Custom style of the component. For more information: https://ketchup.smeup.com/ketchup-showcase/#/customization
         */
        "customStyle": string;
        /**
          * The data of the list.
         */
        "data": ComponentListElement[];
        /**
          * Selects how the items must display their label and how they can be filtered for.
         */
        "displayMode": ItemsDisplayMode;
        /**
          * Keeps string for filtering elements when filter mode is active
         */
        "filter": string;
        /**
          * Used to retrieve component's props values.
          * @param descriptions - When provided and true, the result will be the list of props with their description.
          * @returns List of props as object, each key will be a prop.
         */
        "getProps": (descriptions?: boolean) => Promise<GenericObject>;
        /**
          * Hides rows' text, ideally to display a list of icons only.
         */
        "hideText": boolean;
        /**
          * Defines whether the list is a menu or not.
         */
        "isMenu": boolean;
        /**
          * Sets the status of the menu, when false it's hidden otherwise it's visible.
         */
        "menuVisible": boolean;
        /**
          * This method is used to trigger a new render of the component.
         */
        "refresh": () => Promise<void>;
        "resetFilter": (newFilter: string) => Promise<void>;
        /**
          * Defines the type of selection. Values accepted: listbox, radiogroup or group.
         */
        "roleType"?: string;
        /**
          * Defines whether items are selectable or not.
         */
        "selectable": boolean;
        /**
          * Displays the icons associated to each row when set to true.
         */
        "showIcons": boolean;
        /**
          * The list elements descriptions will be arranged in two lines.
         */
        "twoLine": boolean;
    }
    interface KupMagicBox {
        /**
          * Custom style of the component.
          * @default ""
          * @see https ://ketchup.smeup.com/ketchup-showcase/#/customization
         */
        "customStyle": string;
        /**
          * Sets the data that will be used to display different components.
          * @default null
         */
        "data": MagicBoxData;
        /**
          * Used to retrieve component's props values.
          * @param descriptions - When provided and true, the result will be the list of props with their description.
          * @returns List of props as object, each key will be a prop.
         */
        "getProps": (descriptions?: boolean) => Promise<GenericObject>;
        /**
          * This method is used to trigger a new render of the component.
         */
        "refresh": () => Promise<void>;
    }
    interface KupModal {
        "header": string;
        "visible": boolean;
    }
    interface KupNavBar {
        /**
          * Custom style of the component. For more information: https://ketchup.smeup.com/ketchup-showcase/#/customization
         */
        "customStyle": string;
        /**
          * The actual data of the nav bar.
         */
        "data": ComponentNavBarData;
        /**
          * Used to retrieve component's props values.
          * @param descriptions - When provided and true, the result will be the list of props with their description.
          * @returns List of props as object, each key will be a prop.
         */
        "getProps": (descriptions?: boolean) => Promise<GenericObject>;
        /**
          * Defines how the bar will be displayed.
         */
        "mode": ComponentNavBarMode;
        /**
          * This method is used to trigger a new render of the component.
         */
        "refresh": () => Promise<void>;
    }
    interface KupPaginator {
        "currentPage": number;
        "max": number;
        "mode": PaginatorMode;
        "perPage": number;
        /**
          * This method is used to trigger a new render of the component.
         */
        "refresh": () => Promise<void>;
        "selectedPerPage": number;
    }
    interface KupProbe {
        /**
          * Custom style of the component.
          * @default ""
          * @see https ://ketchup.smeup.com/ketchup-showcase/#/customization
         */
        "customStyle": string;
        /**
          * Specify features to test.
          * @default ""
          * @see https ://ketchup.smeup.com/ketchup-showcase/#/customization
         */
        "features": {
        debug: boolean;
        language: boolean;
        longCycleProp: boolean;
        longCycleVar: boolean;
        objects: boolean;
        objectsFunction: boolean;
        theme: boolean;
    };
        /**
          * This method is used to trigger a new render of the component.
         */
        "printLifecycleTime": () => Promise<{ id: string; featuresTime: number; fullTime: number; }>;
        /**
          * This method is used to trigger a new render of the component.
         */
        "refresh": () => Promise<void>;
    }
    interface KupProgressBar {
        /**
          * Displays the label in the middle of the progress bar. It's the default for the radial variant and can't be changed.
         */
        "centeredLabel": boolean;
        /**
          * Custom style of the component. For more information: https://ketchup.smeup.com/ketchup-showcase/#/customization
         */
        "customStyle": string;
        /**
          * Used to retrieve component's props values.
          * @param descriptions - When provided and true, the result will be the list of props with their description.
          * @returns List of props as object, each key will be a prop.
         */
        "getProps": (descriptions?: boolean) => Promise<GenericObject>;
        /**
          * Flag to show or hide the progress bar's label.
         */
        "hideLabel": boolean;
        /**
          * Specifies an icon to replace the label.
         */
        "icon": string;
        /**
          * Radial version.
         */
        "isRadial": boolean;
        /**
          * Specifies a text for the bar's label.
         */
        "label": string;
        /**
          * This method is used to trigger a new render of the component.
         */
        "refresh": () => Promise<void>;
        /**
          * The current value the progress bar must display.
         */
        "value": number;
    }
    interface KupQlik {
        /**
          * Set Qlik App's istance would you like to use (!!!ALLERT!!! if you have already set appid app's istance will be NOT generated again)
         */
        "app": any;
        /**
          * Set Qlik App's id would you like to use How to find app id --> https://support.qlik.com/articles/000026239
         */
        "appid": string;
        /**
          * Set gird border
         */
        "bordered": boolean;
        /**
          * Set Qlik Server's connection parameters MUST be delcared to open apps {host:'<server host>', port:'<server port http default:80 https default:443 >', prefix:'<virtual proxy prefix dafault: blank>', isSecure:<true/false>}
         */
        "config": QlikServer;
        /**
          * Activate logging Default false
         */
        "debug": boolean;
        /**
          * Set default obj's container pixel height
         */
        "defobjsize": string;
        /**
          * Define width of grid, with true width = 100% responsive, false 1200px
         */
        "fluid": boolean;
        /**
          * Set the grid structure (JSON) selections --> Data selection array    field   --> Qlik field on which to make the selection    values  --> Array of int or string value which to select rows    colums --> they define the structure of grid      obj     --> Qlik Object id would you like to render (How to find Qlik obj id --> https://help.qlik.com/en-US/sense-developer/June2020/Subsystems/Mashups/Content/Sense_Mashups/Howtos/mashups-obtain-app-object-id.htm)      colDim  --> define column's dimension, it could have values from 1 to 12 where 12 is 100%      size    --> define size height of obj's div container, it colud have this values XS|S|M|L|XL        noSelections --> define if selections in object are disable (default: false) Example: { selections:[  {      field: 'Anno',      values:[2020]  } ], rows:[  {    columns:[        {            obj:'KvqdmD', colDim:5, size:'L', noSelections:<true/flase>        },        {            obj:'JjSaVm', colDim:5, size:'S', noSelections:<true/flase>        }    ]  } ] }
         */
        "grid": Array<KupQlikGrid>;
        /**
          * Set Qlik Server istance would you like to use after connection
         */
        "qlik": any;
    }
    interface KupRadio {
        /**
          * Number of columns. When undefined, radio fields will be displayed inline.
         */
        "columns": number;
        /**
          * Custom style of the component. For more information: https://ketchup.smeup.com/ketchup-showcase/#/customization
         */
        "customStyle": string;
        /**
          * List of elements.
         */
        "data": ComponentRadioElement[];
        /**
          * Defaults at false. When set to true, the component is disabled.
         */
        "disabled": boolean;
        /**
          * Used to retrieve component's props values.
          * @param descriptions - When provided and true, the result will be the list of props with their description.
          * @returns List of props as object, each key will be a prop.
         */
        "getProps": (descriptions?: boolean) => Promise<GenericObject>;
        /**
          * Defaults at false. When set to true, the label will be on the left of the component.
         */
        "leadingLabel": boolean;
        /**
          * Defaults at null. It's the name that binds the radio buttons together.
         */
        "name": string;
        /**
          * This method is used to trigger a new render of the component.
         */
        "refresh": () => Promise<void>;
    }
    interface KupRating {
        /**
          * Custom style of the component. For more information: https://ketchup.smeup.com/ketchup-showcase/#/customization
         */
        "customStyle": string;
        /**
          * Defaults at false. When set to true, the component is disabled.
         */
        "disabled": boolean;
        /**
          * Used to retrieve component's props values.
          * @param descriptions - When provided and true, the result will be the list of props with their description.
          * @returns List of props as object, each key will be a prop.
         */
        "getProps": (descriptions?: boolean) => Promise<GenericObject>;
        /**
          * Max number of stars (default 5)
         */
        "maxValue": number;
        /**
          * This method is used to trigger a new render of the component.
         */
        "refresh": () => Promise<void>;
        /**
          * Rated stars
         */
        "value": number;
    }
    interface KupSearch {
        "data": TableData;
        "disabled": boolean;
        "extra": any;
        "initialValue": string;
        /**
          * /** Function that can be invoked when the filter is submitted, but only if in serverHandledFilter mode. It returns the items filtered.
         */
        "searchCallBackOnFilterSubmitted": (
        detail: SearchFilterSubmittedEventDetail
    ) => Promise<TableData> | undefined;
        /**
          * When true it emits events or makes available callbacks useful to obtain and filter data. When false the data inside data prop will be used and filtered in a static way.
         */
        "serverHandledFilter": boolean;
        /**
          * The field used to obtain value
         */
        "valueField": string;
    }
    interface KupSpinner {
        /**
          * When set to true the spinner is animating.
         */
        "active": boolean;
        /**
          * Decides whether the component is a bar or a spinner.
         */
        "barVariant": boolean;
        /**
          * Custom style of the component. For more information: https://ketchup.smeup.com/ketchup-showcase/#/customization
         */
        "customStyle": string;
        /**
          * Width and height of the spinner. For the bar variant, only height.
         */
        "dimensions": string;
        /**
          * Places a blend modal over the wrapper to darken the view (or lighten, when the theme is dark).
         */
        "fader": boolean;
        /**
          * The time required for the "fader" to trigger.
         */
        "faderTimeout": number;
        /**
          * When set to true the component will fill the whole viewport.
         */
        "fullScreen": boolean;
        /**
          * Used to retrieve component's props values.
          * @param descriptions - When provided and true, the result will be the list of props with their description.
          * @returns List of props as object, each key will be a prop.
         */
        "getProps": (descriptions?: boolean) => Promise<GenericObject>;
        /**
          * Sets the layout of the spinner.
         */
        "layout": number;
        /**
          * This method is used to trigger a new render of the component.
         */
        "refresh": () => Promise<void>;
    }
    interface KupSwitch {
        /**
          * Defaults at false. When set to true, the component will be set to 'checked'.
          * @default false
         */
        "checked": boolean;
        /**
          * Custom style of the component.
          * @default ""
          * @see https ://ketchup.smeup.com/ketchup-showcase/#/customization
         */
        "customStyle": string;
        /**
          * Defaults at false. When set to true, the component is disabled.
          * @default false
         */
        "disabled": boolean;
        /**
          * Used to retrieve component's props values.
          * @param descriptions - When provided and true, the result will be the list of props with their description.
          * @returns List of props as object, each key will be a prop.
         */
        "getProps": (descriptions?: boolean) => Promise<GenericObject>;
        /**
          * Defaults at null. When specified, its content will be shown as a label.
          * @default null
         */
        "label": string;
        /**
          * Defaults at false. When set to true, the label will be on the left of the component.
          * @default false
         */
        "leadingLabel": boolean;
        /**
          * This method is used to trigger a new render of the component.
         */
        "refresh": () => Promise<void>;
    }
    interface KupTabBar {
        /**
          * Custom style of the component. For more information: https://ketchup.smeup.com/ketchup-showcase/#/customization
         */
        "customStyle": string;
        /**
          * List of elements.
         */
        "data": ComponentTabBarElement[];
        /**
          * Used to retrieve component's props values.
          * @param descriptions - When provided and true, the result will be the list of props with their description.
          * @returns List of props as object, each key will be a prop.
         */
        "getProps": (descriptions?: boolean) => Promise<GenericObject>;
        /**
          * This method is used to trigger a new render of the component.
         */
        "refresh": () => Promise<void>;
    }
    interface KupTextField {
        /**
          * Custom style of the component.
          * @default ""
          * @see https ://ketchup.smeup.com/ketchup-showcase/#/customization
         */
        "customStyle": string;
        /**
          * When set to true, the component is disabled.
          * @default false
         */
        "disabled": boolean;
        /**
          * When the text field is part of the autocomplete component and the list is opened, enter key selects the item and doesn't submit.
          * @default true
         */
        "emitSubmitEventOnEnter": boolean;
        /**
          * When set to true, the component will be rendered at full width.
          * @default false
         */
        "fullWidth": boolean;
        /**
          * Used to retrieve component's props values.
          * @param descriptions - When provided and true, the result will be the list of props with their description.
          * @returns List of props as object, each key will be a prop.
         */
        "getProps": (descriptions?: boolean) => Promise<GenericObject>;
        /**
          * Returns the component's internal value.
         */
        "getValue": () => Promise<string>;
        /**
          * When set, its content will be shown as a help text below the field.
          * @default null
         */
        "helper": string;
        /**
          * When set, the helper will be shown only when the field is focused.
          * @default false
         */
        "helperWhenFocused": boolean;
        /**
          * When set, the text-field will show this icon.
          * @default null
         */
        "icon": string;
        /**
          * Sets the initial value of the component
          * @default ""
         */
        "initialValue": string;
        /**
          * The HTML type of the input element. It has no effect on text areas.
          * @default "text"
         */
        "inputType": string;
        /**
          * Enables a clear trailing icon.
          * @default false
         */
        "isClearable": boolean;
        /**
          * When set, its content will be shown as a label.
          * @default null
         */
        "label": string;
        /**
          * When set to true, the label will be on the left of the component.
          * @default false
         */
        "leadingLabel": boolean;
        /**
          * The HTML max attribute specifies the maximum value for the input element. Works with the following input types: number, range, date, datetime-local, month, time and week.
          * @default null
         */
        "max": number;
        /**
          * When set, the helper will display a character counter.
          * @default null
         */
        "maxLength": number;
        /**
          * The HTML min attribute specifies the minimum value for the input element. Works with the following input types: number, range, date, datetime-local, month, time and week.
          * @default null
         */
        "min": number;
        /**
          * When set to true, the component will be rendered as an outlined field.
          * @default false
         */
        "outlined": boolean;
        /**
          * Sets the component to read only state, making it not editable, but interactable. Used in combobox component when it behaves as a select.
          * @default false
         */
        "readOnly": boolean;
        /**
          * This method is used to trigger a new render of the component.
         */
        "refresh": () => Promise<void>;
        /**
          * Focuses the input element.
         */
        "setFocus": () => Promise<void>;
        /**
          * Sets the internal value of the component.
         */
        "setValue": (value: string) => Promise<void>;
        /**
          * The HTML step of the input element. It has effect only with number input type.
          * @default null
         */
        "step": number;
        /**
          * When set to true, the component will be rendered as a textarea.
          * @default false
         */
        "textArea": boolean;
        /**
          * When set, the icon will be shown after the text.
          * @default false
         */
        "trailingIcon": boolean;
        /**
          * When set to true, the label will be on the right of the component.
          * @default false
         */
        "trailingLabel": boolean;
    }
    interface KupTextFieldNew {
        /**
          * Custom style of the component.
          * @default ""
          * @see https ://ketchup.smeup.com/ketchup-showcase/#/customization
         */
        "customStyle": string;
        /**
          * When set to true, the component is disabled.
          * @default false
         */
        "disabled": boolean;
        /**
          * When the text field is part of the autocomplete component and the list is opened, enter key selects the item and doesn't submit.
          * @default true
         */
        "emitSubmitEventOnEnter": boolean;
        /**
          * When set to true, the component will be rendered at full width.
          * @default false
         */
        "fullWidth": boolean;
        /**
          * Used to retrieve component's props values.
          * @param descriptions - When provided and true, the result will be the list of props with their description.
          * @returns List of props as object, each key will be a prop.
         */
        "getProps": (descriptions?: boolean) => Promise<GenericObject>;
        /**
          * Returns the component's internal value.
         */
        "getValue": () => Promise<string>;
        /**
          * When set, its content will be shown as a help text below the field.
          * @default null
         */
        "helper": string;
        /**
          * When set, the helper will be shown only when the field is focused.
          * @default false
         */
        "helperWhenFocused": boolean;
        /**
          * When set, the text-field will show this icon.
          * @default null
         */
        "icon": string;
        /**
          * Sets the initial value of the component
          * @default ""
         */
        "initialValue": string;
        /**
          * The HTML type of the input element. It has no effect on text areas.
          * @default "text"
         */
        "inputType": string;
        /**
          * Enables a clear trailing icon.
          * @default false
         */
        "isClearable": boolean;
        /**
          * When set, its content will be shown as a label.
          * @default null
         */
        "label": string;
        /**
          * When set to true, the label will be on the left of the component.
          * @default false
         */
        "leadingLabel": boolean;
        /**
          * The HTML max attribute specifies the maximum value for the input element. Works with the following input types: number, range, date, datetime-local, month, time and week.
          * @default null
         */
        "max": number;
        /**
          * When set, the helper will display a character counter.
          * @default null
         */
        "maxLength": number;
        /**
          * The HTML min attribute specifies the minimum value for the input element. Works with the following input types: number, range, date, datetime-local, month, time and week.
          * @default null
         */
        "min": number;
        /**
          * When set to true, the component will be rendered as an outlined field.
          * @default false
         */
        "outlined": boolean;
        /**
          * Sets the component to read only state, making it not editable, but interactable. Used in combobox component when it behaves as a select.
          * @default false
         */
        "readOnly": boolean;
        /**
          * This method is used to trigger a new render of the component.
         */
        "refresh": () => Promise<void>;
        /**
          * Focuses the input element.
         */
        "setFocus": () => Promise<void>;
        /**
          * Sets the internal value of the component.
         */
        "setValue": (value: string) => Promise<void>;
        /**
          * The HTML step of the input element. It has effect only with number input type.
          * @default null
         */
        "step": number;
        /**
          * When set to true, the component will be rendered as a textarea.
          * @default false
         */
        "textArea": boolean;
        /**
          * When set, the icon will be shown after the text.
          * @default false
         */
        "trailingIcon": boolean;
        /**
          * When set to true, the label will be on the right of the component.
          * @default false
         */
        "trailingLabel": boolean;
    }
    interface KupTimePicker {
        /**
          * When set to true, the drop down menu will display a clock.
         */
        "clockVariant": boolean;
        /**
          * Custom style of the component. For more information: https://ketchup.smeup.com/ketchup-showcase/#/customization
         */
        "customStyle": string;
        /**
          * Props of the sub-components (time input text field)
         */
        "data": Object;
        /**
          * Defaults at false. When set to true, the component is disabled.
         */
        "disabled": boolean;
        /**
          * Used to retrieve component's props values.
          * @param descriptions - When provided and true, the result will be the list of props with their description.
          * @returns List of props as object, each key will be a prop.
         */
        "getProps": (descriptions?: boolean) => Promise<GenericObject>;
        "getValue": () => Promise<string>;
        /**
          * Sets the initial value of the component
         */
        "initialValue": string;
        /**
          * Manage seconds
         */
        "manageSeconds": boolean;
        /**
          * This method is used to trigger a new render of the component.
         */
        "refresh": () => Promise<void>;
        "setFocus": () => Promise<void>;
        "setValue": (value: string) => Promise<void>;
        /**
          * Minutes step
         */
        "timeMinutesStep": number;
    }
    interface KupTooltip {
        /**
          * Data for cell options
         */
        "cellOptions": TooltipCellOptions;
        /**
          * Data for top section
         */
        "data": TooltipData;
        /**
          * Data for the detail
         */
        "detailData": TooltipDetailData;
        /**
          * Timeout for loadDetail
         */
        "detailTimeout": number;
        /**
          * Used to retrieve component's props values.
          * @param descriptions - When provided and true, the result will be the list of props with their description.
          * @returns List of props as object, each key will be a prop.
         */
        "getProps": (descriptions?: boolean) => Promise<GenericObject>;
        /**
          * Layout used to display the items
         */
        "layout": string;
        /**
          * Timeout for tooltip
         */
        "loadTimeout": number;
        /**
          * Owner of this tooltip
         */
        "owner": string;
        /**
          * This method is used to trigger a new render of the component.
         */
        "refresh": () => Promise<void>;
        /**
          * Container element for tooltip
         */
        "relatedObject": TooltipRelatedObject;
        "setTooltipInfo": (relatedObject: TooltipRelatedObject) => Promise<void>;
        "unsetTooltipInfo": () => Promise<void>;
    }
    interface KupTree {
        /**
          * Auto select programmatic selectic node
         */
        "autoSelectionNodeMode": boolean;
        /**
          * Closes any opened column menu.
         */
        "closeColumnMenu": () => Promise<void>;
        "collapseAll": () => Promise<void>;
        /**
          * The columns of the tree when tree visualization is active.
         */
        "columns"?: Column[];
        /**
          * Custom style of the component. For more information: https://ketchup.smeup.com/ketchup-showcase/#/customization
         */
        "customStyle": string;
        /**
          * The json data used to populate the tree view: the basic, always visible tree nodes.
         */
        "data": TreeNode[];
        /**
          * The density of the rows, defaults at 'medium' and can also be set to 'dense' or 'wide'.
         */
        "density": string;
        /**
          * Function that gets invoked when a new set of nodes must be loaded as children of a node.  When useDynamicExpansion is set, the tree component will have two different behaviors depending on the value of this prop. 1 - If this prop is set to null, no callback to download data is available:    the component will emit an event requiring the parent to load the children of the given node. 2 - If this prop is set to have a callback, then the component will automatically make requests to load children of    a given node. After the load has been completed, a different event will be fired to alert the parent of the change.
          * @see useDynamicExpansion
         */
        "dynamicExpansionCallback": (
        treeNodeToExpand: TreeNode,
        treeNodePath: TreeNodePath
    ) => Promise<TreeNode[]> | undefined;
        /**
          * Enables the extracolumns add buttons.
         */
        "enableExtraColumns": boolean;
        "expandAll": () => Promise<void>;
        /**
          * Flag: the nodes of the whole tree must be already expanded upon loading. Disabled nodes do NOT get expanded.
         */
        "expanded": boolean;
        /**
          * List of filters set by the user.
         */
        "filters": GenericFilter;
        /**
          * Used to retrieve component's props values.
          * @param descriptions - When provided and true, the result will be the list of props with their description.
          * @returns List of props as object, each key will be a prop.
         */
        "getProps": (descriptions?: boolean) => Promise<GenericObject>;
        /**
          * When set to true it activates the global filter.
         */
        "globalFilter": boolean;
        /**
          * The value of the global filter.
         */
        "globalFilterValue": string;
        /**
          * Opens the column menu of the given column.
          * @param column - Name of the column.
         */
        "openColumnMenu": (column: string) => Promise<void>;
        /**
          * This method is used to trigger a new render of the component.
         */
        "refresh": () => Promise<void>;
        /**
          * Sets the possibility to remove the selected column.
         */
        "removableColumns": boolean;
        /**
          * Activates the scroll on hover function.
         */
        "scrollOnHover": boolean;
        /**
          * An array of integers containing the path to a selected child.\ Groups up the properties SelFirst, SelItem, SelName.
         */
        "selectedNode": TreeNodePath;
        /**
          * Shows the tree data as a table.
         */
        "showColumns": boolean;
        /**
          * When set to true enables the column filters.
         */
        "showFilters": boolean;
        /**
          * When set to true shows the footer.
         */
        "showFooter": boolean;
        /**
          * Flag: shows the header of the tree when the tree is displayed as a table.
          * @see showColumns
         */
        "showHeader": boolean;
        /**
          * Shows the icons of the nodes.
         */
        "showIcons": boolean;
        /**
          * If set to true, displays tooltip on right click; if set to false, displays tooltip on mouseOver.
         */
        "showTooltipOnRightClick": boolean;
        "stateId": string;
        "store": KupStore;
        /**
          * Defines the timeout for tooltip detail
         */
        "tooltipDetailTimeout": number;
        /**
          * Enable show tooltip
         */
        "tooltipEnabled": boolean;
        /**
          * Defines the timeout for tooltip load
         */
        "tooltipLoadTimeout": number;
        /**
          * Defines the current totals options.
         */
        "totals": TotalsMap;
        /**
          * When the component must use the dynamic expansion feature to open its nodes, it means that not all the nodes of the tree have been passed inside the data property.  Therefore, when expanding a node, the tree must emit an event (or run a given callback) and wait for the child nodes to be downloaded from the server.  For more information:
          * @see dynamicExpansionCallback
         */
        "useDynamicExpansion": boolean;
    }
    interface KupUpload {
        "typeOptions": UploadProps;
    }
}
declare global {
    interface HTMLKupAutocompleteElement extends Components.KupAutocomplete, HTMLStencilElement {
    }
    var HTMLKupAutocompleteElement: {
        prototype: HTMLKupAutocompleteElement;
        new (): HTMLKupAutocompleteElement;
    };
    interface HTMLKupBadgeElement extends Components.KupBadge, HTMLStencilElement {
    }
    var HTMLKupBadgeElement: {
        prototype: HTMLKupBadgeElement;
        new (): HTMLKupBadgeElement;
    };
    interface HTMLKupBoxElement extends Components.KupBox, HTMLStencilElement {
    }
    var HTMLKupBoxElement: {
        prototype: HTMLKupBoxElement;
        new (): HTMLKupBoxElement;
    };
    interface HTMLKupBtnElement extends Components.KupBtn, HTMLStencilElement {
    }
    var HTMLKupBtnElement: {
        prototype: HTMLKupBtnElement;
        new (): HTMLKupBtnElement;
    };
    interface HTMLKupButtonElement extends Components.KupButton, HTMLStencilElement {
    }
    var HTMLKupButtonElement: {
        prototype: HTMLKupButtonElement;
        new (): HTMLKupButtonElement;
    };
    interface HTMLKupCalendarElement extends Components.KupCalendar, HTMLStencilElement {
    }
    var HTMLKupCalendarElement: {
        prototype: HTMLKupCalendarElement;
        new (): HTMLKupCalendarElement;
    };
    interface HTMLKupCardElement extends Components.KupCard, HTMLStencilElement {
    }
    var HTMLKupCardElement: {
        prototype: HTMLKupCardElement;
        new (): HTMLKupCardElement;
    };
    interface HTMLKupChartElement extends Components.KupChart, HTMLStencilElement {
    }
    var HTMLKupChartElement: {
        prototype: HTMLKupChartElement;
        new (): HTMLKupChartElement;
    };
    interface HTMLKupCheckboxElement extends Components.KupCheckbox, HTMLStencilElement {
    }
    var HTMLKupCheckboxElement: {
        prototype: HTMLKupCheckboxElement;
        new (): HTMLKupCheckboxElement;
    };
    interface HTMLKupChipElement extends Components.KupChip, HTMLStencilElement {
    }
    var HTMLKupChipElement: {
        prototype: HTMLKupChipElement;
        new (): HTMLKupChipElement;
    };
    interface HTMLKupColorPickerElement extends Components.KupColorPicker, HTMLStencilElement {
    }
    var HTMLKupColorPickerElement: {
        prototype: HTMLKupColorPickerElement;
        new (): HTMLKupColorPickerElement;
    };
    interface HTMLKupComboboxElement extends Components.KupCombobox, HTMLStencilElement {
    }
    var HTMLKupComboboxElement: {
        prototype: HTMLKupComboboxElement;
        new (): HTMLKupComboboxElement;
    };
    interface HTMLKupCrudElement extends Components.KupCrud, HTMLStencilElement {
    }
    var HTMLKupCrudElement: {
        prototype: HTMLKupCrudElement;
        new (): HTMLKupCrudElement;
    };
    interface HTMLKupDashElement extends Components.KupDash, HTMLStencilElement {
    }
    var HTMLKupDashElement: {
        prototype: HTMLKupDashElement;
        new (): HTMLKupDashElement;
    };
    interface HTMLKupDashListElement extends Components.KupDashList, HTMLStencilElement {
    }
    var HTMLKupDashListElement: {
        prototype: HTMLKupDashListElement;
        new (): HTMLKupDashListElement;
    };
    interface HTMLKupDataTableElement extends Components.KupDataTable, HTMLStencilElement {
    }
    var HTMLKupDataTableElement: {
        prototype: HTMLKupDataTableElement;
        new (): HTMLKupDataTableElement;
    };
    interface HTMLKupDatePickerElement extends Components.KupDatePicker, HTMLStencilElement {
    }
    var HTMLKupDatePickerElement: {
        prototype: HTMLKupDatePickerElement;
        new (): HTMLKupDatePickerElement;
    };
    interface HTMLKupDrawerElement extends Components.KupDrawer, HTMLStencilElement {
    }
    var HTMLKupDrawerElement: {
        prototype: HTMLKupDrawerElement;
        new (): HTMLKupDrawerElement;
    };
    interface HTMLKupDropdownButtonElement extends Components.KupDropdownButton, HTMLStencilElement {
    }
    var HTMLKupDropdownButtonElement: {
        prototype: HTMLKupDropdownButtonElement;
        new (): HTMLKupDropdownButtonElement;
    };
    interface HTMLKupEchartElement extends Components.KupEchart, HTMLStencilElement {
    }
    var HTMLKupEchartElement: {
        prototype: HTMLKupEchartElement;
        new (): HTMLKupEchartElement;
    };
    interface HTMLKupEditorElement extends Components.KupEditor, HTMLStencilElement {
    }
    var HTMLKupEditorElement: {
        prototype: HTMLKupEditorElement;
        new (): HTMLKupEditorElement;
    };
    interface HTMLKupFabElement extends Components.KupFab, HTMLStencilElement {
    }
    var HTMLKupFabElement: {
        prototype: HTMLKupFabElement;
        new (): HTMLKupFabElement;
    };
    interface HTMLKupFieldElement extends Components.KupField, HTMLStencilElement {
    }
    var HTMLKupFieldElement: {
        prototype: HTMLKupFieldElement;
        new (): HTMLKupFieldElement;
    };
    interface HTMLKupFormElement extends Components.KupForm, HTMLStencilElement {
    }
    var HTMLKupFormElement: {
        prototype: HTMLKupFormElement;
        new (): HTMLKupFormElement;
    };
    interface HTMLKupGaugeElement extends Components.KupGauge, HTMLStencilElement {
    }
    var HTMLKupGaugeElement: {
        prototype: HTMLKupGaugeElement;
        new (): HTMLKupGaugeElement;
    };
    interface HTMLKupGridElement extends Components.KupGrid, HTMLStencilElement {
    }
    var HTMLKupGridElement: {
        prototype: HTMLKupGridElement;
        new (): HTMLKupGridElement;
    };
    interface HTMLKupIframeElement extends Components.KupIframe, HTMLStencilElement {
    }
    var HTMLKupIframeElement: {
        prototype: HTMLKupIframeElement;
        new (): HTMLKupIframeElement;
    };
    interface HTMLKupImageElement extends Components.KupImage, HTMLStencilElement {
    }
    var HTMLKupImageElement: {
        prototype: HTMLKupImageElement;
        new (): HTMLKupImageElement;
    };
    interface HTMLKupImageButtonElement extends Components.KupImageButton, HTMLStencilElement {
    }
    var HTMLKupImageButtonElement: {
        prototype: HTMLKupImageButtonElement;
        new (): HTMLKupImageButtonElement;
    };
    interface HTMLKupLayoutElement extends Components.KupLayout, HTMLStencilElement {
    }
    var HTMLKupLayoutElement: {
        prototype: HTMLKupLayoutElement;
        new (): HTMLKupLayoutElement;
    };
    interface HTMLKupLazyElement extends Components.KupLazy, HTMLStencilElement {
    }
    var HTMLKupLazyElement: {
        prototype: HTMLKupLazyElement;
        new (): HTMLKupLazyElement;
    };
    interface HTMLKupListElement extends Components.KupList, HTMLStencilElement {
    }
    var HTMLKupListElement: {
        prototype: HTMLKupListElement;
        new (): HTMLKupListElement;
    };
    interface HTMLKupMagicBoxElement extends Components.KupMagicBox, HTMLStencilElement {
    }
    var HTMLKupMagicBoxElement: {
        prototype: HTMLKupMagicBoxElement;
        new (): HTMLKupMagicBoxElement;
    };
    interface HTMLKupModalElement extends Components.KupModal, HTMLStencilElement {
    }
    var HTMLKupModalElement: {
        prototype: HTMLKupModalElement;
        new (): HTMLKupModalElement;
    };
    interface HTMLKupNavBarElement extends Components.KupNavBar, HTMLStencilElement {
    }
    var HTMLKupNavBarElement: {
        prototype: HTMLKupNavBarElement;
        new (): HTMLKupNavBarElement;
    };
    interface HTMLKupPaginatorElement extends Components.KupPaginator, HTMLStencilElement {
    }
    var HTMLKupPaginatorElement: {
        prototype: HTMLKupPaginatorElement;
        new (): HTMLKupPaginatorElement;
    };
    interface HTMLKupProbeElement extends Components.KupProbe, HTMLStencilElement {
    }
    var HTMLKupProbeElement: {
        prototype: HTMLKupProbeElement;
        new (): HTMLKupProbeElement;
    };
    interface HTMLKupProgressBarElement extends Components.KupProgressBar, HTMLStencilElement {
    }
    var HTMLKupProgressBarElement: {
        prototype: HTMLKupProgressBarElement;
        new (): HTMLKupProgressBarElement;
    };
    interface HTMLKupQlikElement extends Components.KupQlik, HTMLStencilElement {
    }
    var HTMLKupQlikElement: {
        prototype: HTMLKupQlikElement;
        new (): HTMLKupQlikElement;
    };
    interface HTMLKupRadioElement extends Components.KupRadio, HTMLStencilElement {
    }
    var HTMLKupRadioElement: {
        prototype: HTMLKupRadioElement;
        new (): HTMLKupRadioElement;
    };
    interface HTMLKupRatingElement extends Components.KupRating, HTMLStencilElement {
    }
    var HTMLKupRatingElement: {
        prototype: HTMLKupRatingElement;
        new (): HTMLKupRatingElement;
    };
    interface HTMLKupSearchElement extends Components.KupSearch, HTMLStencilElement {
    }
    var HTMLKupSearchElement: {
        prototype: HTMLKupSearchElement;
        new (): HTMLKupSearchElement;
    };
    interface HTMLKupSpinnerElement extends Components.KupSpinner, HTMLStencilElement {
    }
    var HTMLKupSpinnerElement: {
        prototype: HTMLKupSpinnerElement;
        new (): HTMLKupSpinnerElement;
    };
    interface HTMLKupSwitchElement extends Components.KupSwitch, HTMLStencilElement {
    }
    var HTMLKupSwitchElement: {
        prototype: HTMLKupSwitchElement;
        new (): HTMLKupSwitchElement;
    };
    interface HTMLKupTabBarElement extends Components.KupTabBar, HTMLStencilElement {
    }
    var HTMLKupTabBarElement: {
        prototype: HTMLKupTabBarElement;
        new (): HTMLKupTabBarElement;
    };
    interface HTMLKupTextFieldElement extends Components.KupTextField, HTMLStencilElement {
    }
    var HTMLKupTextFieldElement: {
        prototype: HTMLKupTextFieldElement;
        new (): HTMLKupTextFieldElement;
    };
    interface HTMLKupTextFieldNewElement extends Components.KupTextFieldNew, HTMLStencilElement {
    }
    var HTMLKupTextFieldNewElement: {
        prototype: HTMLKupTextFieldNewElement;
        new (): HTMLKupTextFieldNewElement;
    };
    interface HTMLKupTimePickerElement extends Components.KupTimePicker, HTMLStencilElement {
    }
    var HTMLKupTimePickerElement: {
        prototype: HTMLKupTimePickerElement;
        new (): HTMLKupTimePickerElement;
    };
    interface HTMLKupTooltipElement extends Components.KupTooltip, HTMLStencilElement {
    }
    var HTMLKupTooltipElement: {
        prototype: HTMLKupTooltipElement;
        new (): HTMLKupTooltipElement;
    };
    interface HTMLKupTreeElement extends Components.KupTree, HTMLStencilElement {
    }
    var HTMLKupTreeElement: {
        prototype: HTMLKupTreeElement;
        new (): HTMLKupTreeElement;
    };
    interface HTMLKupUploadElement extends Components.KupUpload, HTMLStencilElement {
    }
    var HTMLKupUploadElement: {
        prototype: HTMLKupUploadElement;
        new (): HTMLKupUploadElement;
    };
    interface HTMLElementTagNameMap {
        "kup-autocomplete": HTMLKupAutocompleteElement;
        "kup-badge": HTMLKupBadgeElement;
        "kup-box": HTMLKupBoxElement;
        "kup-btn": HTMLKupBtnElement;
        "kup-button": HTMLKupButtonElement;
        "kup-calendar": HTMLKupCalendarElement;
        "kup-card": HTMLKupCardElement;
        "kup-chart": HTMLKupChartElement;
        "kup-checkbox": HTMLKupCheckboxElement;
        "kup-chip": HTMLKupChipElement;
        "kup-color-picker": HTMLKupColorPickerElement;
        "kup-combobox": HTMLKupComboboxElement;
        "kup-crud": HTMLKupCrudElement;
        "kup-dash": HTMLKupDashElement;
        "kup-dash-list": HTMLKupDashListElement;
        "kup-data-table": HTMLKupDataTableElement;
        "kup-date-picker": HTMLKupDatePickerElement;
        "kup-drawer": HTMLKupDrawerElement;
        "kup-dropdown-button": HTMLKupDropdownButtonElement;
        "kup-echart": HTMLKupEchartElement;
        "kup-editor": HTMLKupEditorElement;
        "kup-fab": HTMLKupFabElement;
        "kup-field": HTMLKupFieldElement;
        "kup-form": HTMLKupFormElement;
        "kup-gauge": HTMLKupGaugeElement;
        "kup-grid": HTMLKupGridElement;
        "kup-iframe": HTMLKupIframeElement;
        "kup-image": HTMLKupImageElement;
        "kup-image-button": HTMLKupImageButtonElement;
        "kup-layout": HTMLKupLayoutElement;
        "kup-lazy": HTMLKupLazyElement;
        "kup-list": HTMLKupListElement;
        "kup-magic-box": HTMLKupMagicBoxElement;
        "kup-modal": HTMLKupModalElement;
        "kup-nav-bar": HTMLKupNavBarElement;
        "kup-paginator": HTMLKupPaginatorElement;
        "kup-probe": HTMLKupProbeElement;
        "kup-progress-bar": HTMLKupProgressBarElement;
        "kup-qlik": HTMLKupQlikElement;
        "kup-radio": HTMLKupRadioElement;
        "kup-rating": HTMLKupRatingElement;
        "kup-search": HTMLKupSearchElement;
        "kup-spinner": HTMLKupSpinnerElement;
        "kup-switch": HTMLKupSwitchElement;
        "kup-tab-bar": HTMLKupTabBarElement;
        "kup-text-field": HTMLKupTextFieldElement;
        "kup-text-field-new": HTMLKupTextFieldNewElement;
        "kup-time-picker": HTMLKupTimePickerElement;
        "kup-tooltip": HTMLKupTooltipElement;
        "kup-tree": HTMLKupTreeElement;
        "kup-upload": HTMLKupUploadElement;
    }
}
declare namespace LocalJSX {
    interface KupAutocomplete {
        /**
          * Function that can be invoked when the filter is updated, but only if in serverHandledFilter mode. It returns the items filtered.
         */
        "callBackOnFilterUpdate"?: (detail: {
        filter: string;
        matchesMinimumCharsRequired: boolean;
        el: EventTarget;
    }) => Promise<any[]> | undefined;
        /**
          * Custom style of the component. For more information: https://ketchup.smeup.com/ketchup-showcase/#/customization
         */
        "customStyle"?: string;
        /**
          * Props of the sub-components.
         */
        "data"?: Object;
        /**
          * Defaults at false. When set to true, the component is disabled.
         */
        "disabled"?: boolean;
        /**
          * Sets how to show the selected item value. Suported values: "code", "description", "both".
         */
        "displayMode"?: ItemsDisplayMode;
        /**
          * Sets the initial value of the component.
         */
        "initialValue"?: string;
        /**
          * The minimum number of chars to trigger the autocomplete
         */
        "minimumChars"?: number;
        /**
          * Event example.
         */
        "onKupAutocompleteBlur"?: (event: CustomEvent<{
        value: any;
        id: string;
        comp: KupAutocomplete;
    }>) => void;
        "onKupAutocompleteChange"?: (event: CustomEvent<{
        value: any;
        id: string;
        comp: KupAutocomplete;
    }>) => void;
        "onKupAutocompleteClick"?: (event: CustomEvent<{
        value: any;
        id: string;
        comp: KupAutocomplete;
    }>) => void;
        "onKupAutocompleteFilterChanged"?: (event: CustomEvent<{
        filter: string;
        matchesMinimumCharsRequired: boolean;
        comp: KupAutocomplete;
    }>) => void;
        "onKupAutocompleteFocus"?: (event: CustomEvent<{
        value: any;
        id: string;
        comp: KupAutocomplete;
    }>) => void;
        "onKupAutocompleteIconClick"?: (event: CustomEvent<{
        value: any;
        id: string;
        comp: KupAutocomplete;
    }>) => void;
        "onKupAutocompleteInput"?: (event: CustomEvent<{
        value: any;
        id: string;
        comp: KupAutocomplete;
    }>) => void;
        "onKupAutocompleteItemClick"?: (event: CustomEvent<{
        value: any;
        id: string;
        comp: KupAutocomplete;
    }>) => void;
        "onKupAutocompleteTextFieldSubmit"?: (event: CustomEvent<{
        value: any;
        id: string;
        comp: KupAutocomplete;
    }>) => void;
        /**
          * Sets how to return the selected item value. Suported values: "code", "description", "both".
         */
        "selectMode"?: ItemsDisplayMode;
        /**
          * When true, it will emit events to inform the listener of the change of the current filter value. Also the component builtin filter will be disabled.
         */
        "serverHandledFilter"?: boolean;
    }
    interface KupBadge {
        /**
          * Custom style of the component. For more information: https://ketchup.smeup.com/ketchup-showcase/#/customization
         */
        "customStyle"?: string;
        /**
          * The data of the image displayed inside the badge.
         */
        "imageData"?: {};
        "onKupBadgeClick"?: (event: CustomEvent<{
        el: EventTarget;
    }>) => void;
        /**
          * The text displayed inside the badge.
         */
        "text"?: string;
    }
    interface KupBox {
        /**
          * Data of the card linked to the box when the latter's layout must be a premade template.
         */
        "cardData"?: GenericObject;
        /**
          * Number of columns
         */
        "columns"?: number;
        /**
          * Custom style of the component. For more information: https://ketchup.smeup.com/ketchup-showcase/#/customization
         */
        "customStyle"?: string;
        /**
          * Data
         */
        "data"?: { columns?: Column[]; rows?: BoxRow[] };
        /**
          * Enable dragging
         */
        "dragEnabled"?: boolean;
        /**
          * Enable dropping
         */
        "dropEnabled"?: boolean;
        /**
          * Drop can be done in section
         */
        "dropOnSection"?: boolean;
        /**
          * If enabled, a button to load / display the row actions will be displayed on the right of every box
         */
        "enableRowActions"?: boolean;
        /**
          * When set to true it activates the global filter.
         */
        "globalFilter"?: boolean;
        /**
          * The value of the global filter.
         */
        "globalFilterValue"?: string;
        /**
          * Displays the boxlist as a Kanban.
         */
        "kanban"?: BoxKanban;
        /**
          * How the field will be displayed. If not present, a default one will be created.
         */
        "layout"?: Layout;
        /**
          * Enable multi selection
         */
        "multiSelection"?: boolean;
        /**
          * Triggered when a box is auto selected via selectBox prop
         */
        "onKupAutoBoxSelect"?: (event: CustomEvent<{
        row: BoxRow;
    }>) => void;
        /**
          * Triggered when a box is clicked
         */
        "onKupBoxClicked"?: (event: CustomEvent<{
        row: BoxRow;
        column?: string;
    }>) => void;
        /**
          * Generic right click event on box.
         */
        "onKupBoxContextMenu"?: (event: CustomEvent<{
        details: GenericObject;
    }>) => void;
        /**
          * Triggered when a box dragging is ended
         */
        "onKupBoxDragEnded"?: (event: CustomEvent<{
        fromId: string;
        fromRow: BoxRow;
        fromSelectedRows?: BoxRow[];
    }>) => void;
        /**
          * Triggered when a box dragging is started
         */
        "onKupBoxDragStarted"?: (event: CustomEvent<{
        fromId: string;
        fromRow: BoxRow;
        fromSelectedRows?: BoxRow[];
    }>) => void;
        /**
          * Triggered when the multi selection checkbox changes value
         */
        "onKupBoxSelected"?: (event: CustomEvent<{
        rows: BoxRow[];
    }>) => void;
        "onKupDidLoad"?: (event: CustomEvent<void>) => void;
        /**
          * Triggered when stop propagation event
         */
        "onKupDidUnload"?: (event: CustomEvent<void>) => void;
        /**
          * When the row menu action icon is clicked
         */
        "onKupRowActionClicked"?: (event: CustomEvent<{
        row: BoxRow;
        action: RowAction;
        index: number;
    }>) => void;
        /**
          * When the row menu action icon is clicked
         */
        "onKupRowActionMenuClicked"?: (event: CustomEvent<{
        row: BoxRow;
    }>) => void;
        /**
          * Current page number
         */
        "pageSelected"?: number;
        /**
          * Number of boxes per page
         */
        "pageSize"?: number;
        /**
          * Enables pagination
         */
        "pagination"?: boolean;
        /**
          * Number of current rows per page
         */
        "rowsPerPage"?: number;
        /**
          * Activates the scroll on hover function.
         */
        "scrollOnHover"?: boolean;
        /**
          * Automatically selects the box at the specified index
         */
        "selectBox"?: number;
        /**
          * Multiple selection
         */
        "selectedRowsState"?: string;
        /**
          * If enabled, highlights the selected box/boxes
         */
        "showSelection"?: boolean;
        /**
          * If set to true, displays tooltip on right click; if set to false, displays tooltip on mouseOver.
         */
        "showTooltipOnRightClick"?: boolean;
        /**
          * If sorting is enabled, specifies which column to sort
         */
        "sortBy"?: string;
        /**
          * Enable sorting
         */
        "sortEnabled"?: boolean;
        "stateId"?: string;
        "store"?: KupStore;
        /**
          * Disable swipe
         */
        "swipeDisabled"?: boolean;
        /**
          * Defines the timeout for tooltip detail
         */
        "tooltipDetailTimeout"?: number;
        /**
          * Enable show tooltip
         */
        "tooltipEnabled"?: boolean;
        /**
          * Defines the timeout for tooltip load
         */
        "tooltipLoadTimeout"?: number;
    }
    interface KupBtn {
        /**
          * Number of columns for draw sub-components.
         */
        "columns"?: number;
        /**
          * Custom style of the component. For more information: https://ketchup.smeup.com/ketchup-showcase/#/customization
         */
        "customStyle"?: string;
        /**
          * Props of the sub-components.
         */
        "data"?: TreeNode[];
        /**
          * Default at false. When set to true, the sub-components are disabled.
         */
        "disabled"?: boolean;
        "onKupBtnClick"?: (event: CustomEvent<{
        id: string;
        subId: string;
        obj: any;
    }>) => void;
        /**
          * If enabled, highlights the selected button
         */
        "showSelection"?: boolean;
        /**
          * Defines the style of the buttons. Available styles are "flat" and "outlined", "raised" is the default. If set, will be valid for all sub-components.
         */
        "styling"?: string;
    }
    interface KupButton {
        /**
          * When set to true, the icon button state will be on.
          * @default false
         */
        "checked"?: boolean;
        /**
          * Custom style of the component.
          * @default ""
          * @see https ://ketchup.smeup.com/ketchup-showcase/#/customization
         */
        "customStyle"?: string;
        /**
          * Defaults at false. When set to true, the component is disabled.
          * @default false
         */
        "disabled"?: boolean;
        /**
          * When set, the button will show this icon.
          * @default null
         */
        "icon"?: string;
        /**
          * When set, the icon button off state will show this icon. Otherwise, an outlined version of the icon prop will be displayed.
          * @default null
         */
        "iconOff"?: string;
        /**
          * When set, the button will show this text.
          * @default null
         */
        "label"?: string;
        "onKupButtonBlur"?: (event: CustomEvent<{
        id: string;
        value: string;
    }>) => void;
        "onKupButtonClick"?: (event: CustomEvent<{
        id: string;
        value: string;
    }>) => void;
        "onKupButtonFocus"?: (event: CustomEvent<{
        id: string;
        value: string;
    }>) => void;
        /**
          * Defines the style of the button. Styles available: "flat", "outlined" and "raised" which is also the default.
          * @default FButtonStyling.RAISED
         */
        "styling"?: FButtonStyling;
        /**
          * When set to true, the icon button will be toggable on/off.
          * @default false
         */
        "toggable"?: boolean;
        /**
          * When set, the icon will be shown after the text.
          * @default false
         */
        "trailingIcon"?: boolean;
    }
    interface KupCalendar {
        "data"?: DataTable;
        "dateCol"?: string;
        "descrCol"?: string;
        "endCol"?: string;
        "hideNavigation"?: boolean;
        "iconCol"?: string;
        "imageCol"?: string;
        "initialDate"?: string;
        /**
          * When a date is clicked
         */
        "onKupCalendarDateClicked"?: (event: CustomEvent<Date>) => void;
        /**
          * When an event is clicked
         */
        "onKupCalendarEventClicked"?: (event: CustomEvent<Row>) => void;
        /**
          * When a date is dropped
         */
        "onKupCalendarEventDropped"?: (event: CustomEvent<{
        fromDate: {
            start: Date;
            end: Date;
        };
        toDate: {
            start: Date;
            end: Date;
        };
    }>) => void;
        /**
          * When the navigation change
         */
        "onKupCalendarViewChanged"?: (event: CustomEvent<{
        from: Date;
        to: Date;
    }>) => void;
        "startCol"?: string;
        "styleCol"?: string;
        "weekView"?: boolean;
    }
    interface KupCard {
        /**
          * Custom style of the component.
          * @default ""
          * @see https ://ketchup.smeup.com/ketchup-showcase/#/customization
         */
        "customStyle"?: string;
        /**
          * The actual data of the card.
          * @default null
         */
        "data"?: CardData;
        /**
          * Defines whether the card is a menu or not. Works together with menuVisible.
          * @default false
         */
        "isMenu"?: boolean;
        /**
          * Sets the type of the card.
          * @default CardFamily.STANDARD
         */
        "layoutFamily"?: CardFamily;
        /**
          * Sets the number of the layout.
          * @default 1
         */
        "layoutNumber"?: number;
        /**
          * Sets the status of the card as menu, when false it's hidden otherwise it's visible. Works together with isMenu.
          * @default false
         */
        "menuVisible"?: boolean;
        /**
          * Triggered when the card is clicked.
         */
        "onKupCardClick"?: (event: CustomEvent<{
        card: KupCard;
        id: string;
    }>) => void;
        /**
          * Triggered when a sub-component of the card emits an event.
         */
        "onKupCardEvent"?: (event: CustomEvent<{
        card: KupCard;
        event: any;
    }>) => void;
        /**
          * The width of the card, defaults to 100%. Accepts any valid CSS format (px, %, vw, etc.).
          * @default "100%"
         */
        "sizeX"?: string;
        /**
          * The height of the card, defaults to 100%. Accepts any valid CSS format (px, %, vh, etc.).
          * @default "100%"
         */
        "sizeY"?: string;
    }
    interface KupChart {
        /**
          * Sets the chart to a 2D or 3D aspect. 3D only works for Pie graphs.
         */
        "asp"?: ChartAspect;
        /**
          * Sets the axis of the chart.
         */
        "axis"?: string;
        /**
          * Title of the graph.
         */
        "chartTitle"?: ChartTitle;
        /**
          * Colors of the chart.
         */
        "colors"?: string[];
        /**
          * Custom style of the component. For more information: https://ketchup.smeup.com/ketchup-showcase/#/customization.
         */
        "customStyle"?: string;
        /**
          * The actual data of the chart.
         */
        "data"?: DataTable;
        /**
          * Customize the hAxis.
         */
        "hAxis"?: ChartAxis;
        /**
          * Sets the position of the legend. Supported values: bottom, labeled, left, none, right, top. Keep in mind that legend types are tied to chart types, some combinations might not work.
         */
        "legend"?: string;
        /**
          * Renders charts without the Google API and using jQuery Sparkline.
         */
        "offlineMode"?: ChartOfflineMode;
        /**
          * Triggered when a chart serie is clicked
         */
        "onKupChartClicked"?: (event: CustomEvent<ChartClickedEvent>) => void;
        /**
          * The data series to be displayed. They must be of the same type.
         */
        "series"?: ChartSerie[];
        /**
          * Displays the numerical values.
         */
        "showMarks"?: boolean;
        /**
          * The width of the chart, defaults to 100%. Accepts any valid CSS format (px, %, vw, etc.).
         */
        "sizeX"?: string;
        /**
          * The height of the chart, defaults to 100%. Accepts any valid CSS format (px, %, vh, etc.).
         */
        "sizeY"?: string;
        /**
          * Displays the data columns of an object on top of each other.
         */
        "stacked"?: boolean;
        /**
          * The type of the chart. Supported formats: Area, Bubble, Cal, Candlestick, Combo, Geo, Hbar, Line, Ohlc, Pie, Sankey, Scatter, Unk, Vbar.
         */
        "types"?: ChartType[];
        /**
          * Customize the vAxis.
         */
        "vAxis"?: ChartAxis;
        /**
          * Google chart version to load
         */
        "version"?: string;
    }
    interface KupCheckbox {
        /**
          * Defaults at false. When set to true, the component will be set to 'checked'.
          * @default false
         */
        "checked"?: boolean;
        /**
          * Custom style of the component.
          * @default ""
          * @see https ://ketchup.smeup.com/ketchup-showcase/#/customization
         */
        "customStyle"?: string;
        /**
          * When set to true, the component is disabled.
          * @default false
         */
        "disabled"?: boolean;
        /**
          * When set to true, the component will be set to 'indeterminate'.
          * @default false
         */
        "indeterminate"?: boolean;
        /**
          * When specified, its content will be shown as a label.
          * @default null
         */
        "label"?: string;
        /**
          * When set to true, the label will be on the left of the component.
          * @default false
         */
        "leadingLabel"?: boolean;
        /**
          * Triggered when the input element loses focus.
         */
        "onKupCheckboxBlur"?: (event: CustomEvent<{
        id: string;
        checked: boolean;
        value: string;
    }>) => void;
        /**
          * Triggered when the input element's value changes.
         */
        "onKupCheckboxChange"?: (event: CustomEvent<{
        id: string;
        checked: boolean;
        value: string;
    }>) => void;
        /**
          * Triggered when the input element gets focused.
         */
        "onKupCheckboxFocus"?: (event: CustomEvent<{
        id: string;
        checked: boolean;
        value: string;
    }>) => void;
    }
    interface KupChip {
        /**
          * Custom style of the component.
          * @default ""
          * @see https ://ketchup.smeup.com/ketchup-showcase/#/customization
         */
        "customStyle"?: string;
        /**
          * List of elements.
          * @deprecated soon to be replaced by TreeNode[]
          * @default []
         */
        "data"?: FChipData[];
        /**
          * List of elements.
          * @default []
         */
        "dataNew"?: TreeNode[];
        /**
          * Triggered when a chip loses focus.
         */
        "onKupChipBlur"?: (event: CustomEvent<{
        id: string;
        index: number;
        obj: KupObj;
        value: string;
    }>) => void;
        /**
          * Triggered when a chip is clicked.
         */
        "onKupChipClick"?: (event: CustomEvent<{
        id: string;
        index: number;
        obj: KupObj;
        value: string;
    }>) => void;
        /**
          * Triggered when a chip gets focused.
         */
        "onKupChipFocus"?: (event: CustomEvent<{
        id: string;
        index: number;
        obj: KupObj;
        value: string;
    }>) => void;
        /**
          * Triggered when the removal icon on input chips is clicked.
         */
        "onKupChipIconClick"?: (event: CustomEvent<{
        id: string;
        index: number;
        obj: KupObj;
        value: string;
    }>) => void;
        /**
          * The type of chip. Available types: input, filter, choice or empty for default.
          * @default FChipType.STANDARD
         */
        "type"?: FChipType;
    }
    interface KupColorPicker {
        /**
          * Custom style of the component. For more information: https://ketchup.smeup.com/ketchup-showcase/#/customization
         */
        "customStyle"?: string;
        /**
          * Props of the text field.
         */
        "data"?: Object;
        /**
          * Defaults at false. When set to true, the component is disabled.
         */
        "disabled"?: boolean;
        /**
          * Sets the initial value of the component. Can be css color name, hex code or rgb code (sample: "red" or rgb(255, 0, 0) or "#FF0000" ).
         */
        "initialValue"?: string;
        "onKupColorPickerChange"?: (event: CustomEvent<{
        value: any;
    }>) => void;
        "onKupColorPickerInput"?: (event: CustomEvent<{
        value: any;
    }>) => void;
        /**
          * When true, the component's text field will be replaced by a swatch.
         */
        "swatchOnly"?: boolean;
    }
    interface KupCombobox {
        /**
          * Custom style of the component. For more information: https://ketchup.smeup.com/ketchup-showcase/#/customization
         */
        "customStyle"?: string;
        /**
          * Props of the sub-components (date input text field).
         */
        "data"?: Object;
        /**
          * Defaults at false. When set to true, the component is disabled.
         */
        "disabled"?: boolean;
        /**
          * Sets how to show the selected item value. Suported values: "code", "description", "both".
         */
        "displayMode"?: ItemsDisplayMode;
        /**
          * Sets the initial value of the component
         */
        "initialValue"?: string;
        /**
          * Lets the combobox behave as a select element.
         */
        "isSelect"?: boolean;
        /**
          * Event example.
         */
        "onKupComboboxBlur"?: (event: CustomEvent<{
        value: any;
    }>) => void;
        "onKupComboboxChange"?: (event: CustomEvent<{
        value: any;
    }>) => void;
        "onKupComboboxClick"?: (event: CustomEvent<{
        id: string;
        value: any;
    }>) => void;
        "onKupComboboxFocus"?: (event: CustomEvent<{
        value: any;
    }>) => void;
        "onKupComboboxIconClick"?: (event: CustomEvent<{
        value: any;
    }>) => void;
        "onKupComboboxInput"?: (event: CustomEvent<{
        value: any;
    }>) => void;
        "onKupComboboxItemClick"?: (event: CustomEvent<{
        id: string;
        value: any;
    }>) => void;
        "onKupComboboxTextFieldSubmit"?: (event: CustomEvent<{
        value: any;
    }>) => void;
        /**
          * Sets how to return the selected item value. Suported values: "code", "description", "both".
         */
        "selectMode"?: ItemsDisplayMode;
    }
    interface KupCrud {
        "actions"?: FormActions;
        "autocompleteCallBackOnFilterUpdate"?: (detail: {
        filter: string;
        matchesMinimumCharsRequired: boolean;
        el: EventTarget;
    }) => Promise<any[]> | undefined;
        "config"?: CrudConfig;
        "crudCallBackOnFormActionSubmitted"?: (
        detail: FormActionEventDetail
    ) => Promise<CrudCallBackOnFormEventResult> | undefined;
        "crudCallBackOnFormFieldChanged"?: (
        detail: FormFieldEventDetail
    ) => Promise<CrudCallBackOnFormEventResult> | undefined;
        "disabled"?: boolean;
        "extra"?: any;
        "extraMessages"?: FormMessage[];
        "fields"?: FormFields;
        "onKupCrudBlurred"?: (event: CustomEvent<any>) => void;
        "onKupCrudFocused"?: (event: CustomEvent<any>) => void;
        "onKupCrudFormActionSubmitted"?: (event: CustomEvent<FormActionEventDetail>) => void;
        "onKupCrudFormFieldChanged"?: (event: CustomEvent<FormFieldEventDetail>) => void;
        "onKupCrudRecordsChanged"?: (event: CustomEvent<CrudRecordsChanged>) => void;
        "records"?: CrudRecord[];
        "refid"?: string;
        "searchCallBackOnFilterSubmitted"?: (
        detail: SearchFilterSubmittedEventDetail
    ) => Promise<TableData> | undefined;
        "sections"?: FormSection;
    }
    interface KupDash {
        /**
          * The component can be clicked.
         */
        "active"?: boolean;
        /**
          * Sets the font size of the component.
         */
        "fontsize"?: string;
        /**
          * No idea what this is about.
         */
        "index"?: number;
        /**
          * Sets the layout of the component.
         */
        "layout"?: string;
        "onKetchupDashClicked"?: (event: CustomEvent<{
        id: number;
    }>) => void;
    }
    interface KupDashList {
        "active"?: boolean;
        "columnsNumber"?: number;
        "data"?: TableData;
        "fontsize"?: string;
        "fullWidth"?: boolean;
        "horizontal"?: boolean;
        "iconColor"?: Array<any>;
        "layout"?: string;
        "onKetchupDashClicked"?: (event: CustomEvent<{
        idx: number;
    }>) => void;
        "textColor"?: Array<any>;
        "valueColor"?: Array<any>;
    }
    interface KupDataTable {
        /**
          * Custom style of the component. For more information: https://ketchup.smeup.com/ketchup-showcase/#/customization
         */
        "customStyle"?: string;
        /**
          * The data of the table.
         */
        "data"?: TableData;
        /**
          * The density of the rows, defaults at 'medium' and can be also set to 'large' or 'small'.
         */
        "density"?: string;
        /**
          * Enable row dragging
         */
        "dragEnabled"?: boolean;
        /**
          * Enable record dropping
         */
        "dropEnabled"?: boolean;
        /**
          * When set to true, editable cells will be rendered using input components.
          * @default false
         */
        "editableData"?: boolean;
        /**
          * Defines the label to show when the table is empty.
         */
        "emptyDataLabel"?: string;
        /**
          * Enables the extracolumns add buttons.
         */
        "enableExtraColumns"?: boolean;
        /**
          * Enables the sorting of columns by dragging them into different columns.
         */
        "enableSortableColumns"?: boolean;
        /**
          * Expands groups when set to true.
         */
        "expandGroups"?: boolean;
        /**
          * List of filters set by the user.
         */
        "filters"?: GenericFilter;
        /**
          * Fixes the given number of columns so that they stay visible when horizontally scrolling the data-table. If grouping is active or the value of the prop is <= 0, this prop will have no effect. Can be combined with fixedRows.
          * @see fixedRows
         */
        "fixedColumns"?: number;
        /**
          * Fixes the given number of rows so that they stay visible when vertically scrolling the data-table. If grouping is active or the value of the prop is <= 0, this prop will have no effect. Can be combined with fixedColumns.
          * @see fixedColumns
         */
        "fixedRows"?: number;
        /**
          * Forces cells with long text and a fixed column size to have an ellipsis set on their text. The reflect attribute is mandatory to allow styling.
         */
        "forceOneLine"?: boolean;
        /**
          * When set to true it activates the global filter.
         */
        "globalFilter"?: boolean;
        /**
          * The value of the global filter.
         */
        "globalFilterValue"?: string;
        /**
          * How the label of a group must be displayed. For available values [see here]{@link GroupLabelDisplayMode}
         */
        "groupLabelDisplay"?: GroupLabelDisplayMode;
        /**
          * The list of groups.
         */
        "groups"?: Array<GroupObject>;
        /**
          * When set to true the header will stick on top of the table when scrolling.
         */
        "headerIsPersistent"?: boolean;
        /**
          * When set to true, clicked-on rows will have a visual feedback.
          * @default false
         */
        "isFocusable"?: boolean;
        /**
          * When set to true, extra rows will be automatically loaded once the last row enters the viewport. When groups are present, the number of rows is referred to groups and not to their content. Paginator is disabled.
         */
        "lazyLoadRows"?: boolean;
        /**
          * Defines the placeholder character which will be replaced by a line break inside table header cells, normal or sticky.
         */
        "lineBreakCharacter"?: string;
        /**
          * Sets a maximum limit of new records which can be required by the load more functionality.
         */
        "loadMoreLimit"?: number;
        /**
          * Establish the modality of how many new records will be downloaded.  This property is regulated also by loadMoreStep.
          * @see loadMoreStep *
          * @see loadMoreLimit
         */
        "loadMoreMode"?: LoadMoreMode;
        /**
          * The number of records which will be requested to be downloaded when clicking on the load more button.  This property is regulated also by loadMoreMode.
          * @see loadMoreMode *
          * @see loadMoreLimit
         */
        "loadMoreStep"?: number;
        "onKupAddCodeDecodeColumn"?: (event: CustomEvent<{ column: string }>) => void;
        /**
          * When 'add column' menu item is clicked
         */
        "onKupAddColumn"?: (event: CustomEvent<{ column: string }>) => void;
        /**
          * When a row is auto selected via selectRow prop
         */
        "onKupAutoRowSelect"?: (event: CustomEvent<{
        selectedRow: Row;
    }>) => void;
        "onKupCellButtonClicked"?: (event: CustomEvent<KupDataTableCellButtonClick>) => void;
        "onKupCellTextFieldInput"?: (event: CustomEvent<KupDataTableCellTextFieldInput>) => void;
        /**
          * Emitted when a cell's data has been updated.
         */
        "onKupDataTableCellUpdate"?: (event: CustomEvent<{
        cell: Cell;
        column: Column;
        id: string;
        row: Row;
        event: any;
    }>) => void;
        /**
          * Generic click event on data table.
         */
        "onKupDataTableClick"?: (event: CustomEvent<{
        details: EventHandlerDetails;
    }>) => void;
        /**
          * When the column menu is being opened/closed.
         */
        "onKupDataTableColumnMenu"?: (event: CustomEvent<{
        card: HTMLKupCardElement;
        open: boolean;
    }>) => void;
        /**
          * Generic right click event on data table.
         */
        "onKupDataTableContextMenu"?: (event: CustomEvent<{
        details: EventHandlerDetails;
    }>) => void;
        /**
          * Generic double click event on data table.
         */
        "onKupDataTableDblClick"?: (event: CustomEvent<{
        details: EventHandlerDetails;
    }>) => void;
        /**
          * When component load is complete
         */
        "onKupDidLoad"?: (event: CustomEvent<{}>) => void;
        /**
          * When component unload is complete
         */
        "onKupDidUnload"?: (event: CustomEvent<{}>) => void;
        "onKupLoadMoreClicked"?: (event: CustomEvent<{
        loadItems: number;
    }>) => void;
        /**
          * When cell option is clicked
         */
        "onKupOptionClicked"?: (event: CustomEvent<{
        column: string;
        row: Row;
    }>) => void;
        /**
          * When rows selections reset
         */
        "onKupResetSelectedRows"?: (event: CustomEvent<{}>) => void;
        /**
          * When a row action is clicked
         */
        "onKupRowActionClicked"?: (event: CustomEvent<{
        type: 'default' | 'variable' | 'expander';
        row: Row;
        action?: RowAction;
        index?: number;
    }>) => void;
        /**
          * When a row is selected
         */
        "onKupRowSelected"?: (event: CustomEvent<{
        selectedRows: Array<Row>;
        clickedRow: Row;
        clickedColumn: string;
    }>) => void;
        /**
          * Current selected page set on component load
         */
        "pageSelected"?: number;
        /**
          * Sets the position of the paginator. Available positions: top, bottom or both.
         */
        "paginatorPos"?: PaginatorPos;
        /**
          * Sets the possibility to remove the selected column.
         */
        "removableColumns"?: boolean;
        /**
          * Sets the actions of the rows.
         */
        "rowActions"?: Array<RowAction>;
        /**
          * Sets the number of rows per page to display.
         */
        "rowsPerPage"?: number;
        /**
          * Activates the scroll on hover function.
         */
        "scrollOnHover"?: boolean;
        /**
          * Selects the row at the specified rendered rows prosition (base 1).
         */
        "selectRow"?: number;
        /**
          * Semicolon separated rows id to select.
         */
        "selectRowsById"?: string;
        /**
          * Set the type of the rows selection.
         */
        "selection"?: SelectionMode;
        /**
          * If set to true, displays the button to open the customization panel.
         */
        "showCustomization"?: boolean;
        /**
          * When set to true enables the column filters.
         */
        "showFilters"?: boolean;
        /**
          * When set to true shows the footer.
         */
        "showFooter"?: boolean;
        /**
          * Can be used to customize the grid view of the table.
         */
        "showGrid"?: ShowGrid;
        /**
          * When set to true enables the column grouping.
         */
        "showGroups"?: boolean;
        /**
          * Enables rendering of the table header.
          * @namespace KupDataTable.showHeader
         */
        "showHeader"?: boolean;
        /**
          * If set to true, displays the button to load more records.
         */
        "showLoadMore"?: boolean;
        /**
          * If set to true, displays tooltip on right click; if set to false, displays tooltip on mouseOver.
         */
        "showTooltipOnRightClick"?: boolean;
        /**
          * Defines the current sorting options.
         */
        "sort"?: Array<SortObject>;
        /**
          * When set to true enables the sorting of the columns.
         */
        "sortEnabled"?: boolean;
        /**
          * If set to true, when a column is dragged to be sorted, the component directly mutates the data.columns property and then fires the event
         */
        "sortableColumnsMutateData"?: boolean;
        "stateId"?: string;
        "store"?: KupStore;
        /**
          * Sets the height of the table.
         */
        "tableHeight"?: string;
        /**
          * Sets the width of the table.
         */
        "tableWidth"?: string;
        /**
          * Defines the timeout for tooltip detail
         */
        "tooltipDetailTimeout"?: number;
        /**
          * Enable show tooltip
         */
        "tooltipEnabled"?: boolean;
        /**
          * Defines the timeout for tooltip load
         */
        "tooltipLoadTimeout"?: number;
        /**
          * Defines the current totals options
         */
        "totals"?: TotalsMap;
        /**
          * Transposes the data of the data table
         */
        "transpose"?: boolean;
    }
    interface KupDatePicker {
        /**
          * Custom style of the component. For more information: https://ketchup.smeup.com/ketchup-showcase/#/customization
         */
        "customStyle"?: string;
        /**
          * Props of the sub-components.
         */
        "data"?: Object;
        /**
          * Defaults at false. When set to true, the component is disabled.
         */
        "disabled"?: boolean;
        /**
          * First day number (0 - sunday, 1 - monday, ...)
         */
        "firstDayIndex"?: number;
        /**
          * Sets the initial value of the component
         */
        "initialValue"?: string;
        "onKupDatePickerBlur"?: (event: CustomEvent<{
        id: any;
        value: any;
    }>) => void;
        "onKupDatePickerChange"?: (event: CustomEvent<{
        id: any;
        value: any;
    }>) => void;
        "onKupDatePickerClearIconClick"?: (event: CustomEvent<{
        id: any;
    }>) => void;
        "onKupDatePickerClick"?: (event: CustomEvent<{
        id: any;
        value: any;
    }>) => void;
        "onKupDatePickerFocus"?: (event: CustomEvent<{
        id: any;
        value: any;
    }>) => void;
        "onKupDatePickerIconClick"?: (event: CustomEvent<{
        id: any;
        value: any;
    }>) => void;
        "onKupDatePickerInput"?: (event: CustomEvent<{
        id: any;
        value: any;
    }>) => void;
        "onKupDatePickerItemClick"?: (event: CustomEvent<{
        id: any;
        value: any;
    }>) => void;
        "onKupDatePickerTextFieldSubmit"?: (event: CustomEvent<{
        id: any;
        value: any;
    }>) => void;
    }
    interface KupDrawer {
        /**
          * Custom style of the component. For more information: https://ketchup.smeup.com/ketchup-showcase/#/customization
         */
        "customStyle"?: string;
        "onKupDrawerClose"?: (event: CustomEvent<any>) => void;
        "onKupDrawerOpen"?: (event: CustomEvent<any>) => void;
        /**
          * Defaults at false. When set to true, the drawer appears.
         */
        "opened"?: boolean;
    }
    interface KupDropdownButton {
        /**
          * Custom style of the component. For more information: https://ketchup.smeup.com/ketchup-showcase/#/customization
         */
        "customStyle"?: string;
        /**
          * Props of the sub-components.
         */
        "data"?: Object;
        /**
          * Defaults at false. When set to true, the component is disabled.
         */
        "disabled"?: boolean;
        /**
          * Sets how to show the selected item value. Suported values: "code", "description", "both".
         */
        "displayMode"?: ItemsDisplayMode;
        /**
          * Defaults at null. When set, the button will show this icon.
         */
        "icon"?: string;
        /**
          * Sets the initial value of the component.
         */
        "initialValue"?: string;
        /**
          * Defaults at null. When set, the button will show this text.
         */
        "label"?: string;
        "onKupDropdownButtonBlur"?: (event: CustomEvent<{
        id: string;
        value: string;
    }>) => void;
        "onKupDropdownButtonClick"?: (event: CustomEvent<{
        id: string;
        value: string;
    }>) => void;
        "onKupDropdownButtonFocus"?: (event: CustomEvent<{
        id: string;
        value: string;
    }>) => void;
        "onKupDropdownSelectionChange"?: (event: CustomEvent<{
        value: any;
    }>) => void;
        "onKupDropdownSelectionItemClick"?: (event: CustomEvent<{
        value: any;
    }>) => void;
        /**
          * Sets how to return the selected item value. Suported values: "code", "description", "both".
         */
        "selectMode"?: ItemsDisplayMode;
        /**
          * Defines the style of the button. Styles available: "flat", "outlined" and "raised" which is also the default.
          * @default FButtonStyling.RAISED
         */
        "styling"?: FButtonStyling;
        /**
          * Defaults at null. When set, the icon will be shown after the text.
         */
        "trailingIcon"?: boolean;
    }
    interface KupEchart {
        /**
          * Sets the axis of the chart.
         */
        "axis"?: string;
        /**
          * Title of the graph.
         */
        "chartTitle"?: EchartTitle;
        /**
          * Custom style of the component. For more information: https://ketchup.smeup.com/ketchup-showcase/#/customization.
         */
        "customStyle"?: string;
        /**
          * The actual data of the chart.
         */
        "data"?: object;
        /**
          * Sets the position of the legend. Supported values: bottom, left, right, top. Keep in mind that legend types are tied to chart types, some combinations might not work.
         */
        "legend"?: string;
        /**
          * Choose which map you want to view, supported values: "europe", "africa", "asia", "oceania", "america" and "world". You can also provide your own JSON.
         */
        "mapType"?: any;
        "onKupEchartClicked"?: (event: CustomEvent<any>) => void;
        /**
          * The data series to be displayed. They must be of the same type.
         */
        "series"?: string[];
        /**
          * The type of the chart. Supported formats: Line, Pie, Map, Scatter
         */
        "types"?: String[];
    }
    interface KupEditor {
        /**
          * The html to be rendered and edited
         */
        "text"?: string;
    }
    interface KupFab {
        "colorButton"?: string;
        "onKupFabClick"?: (event: CustomEvent<{ id: string }>) => void;
    }
    interface KupField {
        /**
          * Custom style of the component. For more information: https://ketchup.smeup.com/ketchup-showcase/#/customization
         */
        "customStyle"?: string;
        /**
          * Effective data to pass to the component.
         */
        "data"?: Object;
        /**
          * The text of the label. If set to empty or has only white space chars, the label will be removed.
         */
        "label"?: string;
        /**
          * Sets the label's position, left right or top.
         */
        "labelPos"?: string;
        /**
          * Launched when the value of the current FLD changes.
         */
        "onKupFldChange"?: (event: CustomEvent<KupFldChangeEvent>) => void;
        /**
          * Launched when the FLD values are confirmed and a submit event is triggered.
         */
        "onKupFldSubmit"?: (event: CustomEvent<KupFldSubmitEvent>) => void;
        /**
          * Sets whether the submit button must be displayed or not.
         */
        "showSubmit"?: boolean;
        /**
          * Sets the submit button's label.
         */
        "submitLabel"?: string;
        /**
          * Sets the submit button's position, top right bottom or left.
         */
        "submitPos"?: string;
        /**
          * The type of the FLD
         */
        "type"?: string;
    }
    interface KupForm {
        "actions"?: FormActions;
        "autocompleteCallBackOnFilterUpdate"?: (detail: {
        filter: string;
        matchesMinimumCharsRequired: boolean;
        el: EventTarget;
    }) => Promise<any[]> | undefined;
        "cells"?: FormCells;
        "config"?: FormConfig;
        "crudCallBackOnFormActionSubmitted"?: (
        detail: FormActionEventDetail
    ) => Promise<CrudCallBackOnFormEventResult> | undefined;
        "crudCallBackOnFormFieldChanged"?: (
        detail: FormFieldEventDetail
    ) => Promise<CrudCallBackOnFormEventResult> | undefined;
        "extra"?: any;
        "extraMessages"?: FormMessage[];
        "fields"?: FormFields;
        "onKupFormActionSubmitted"?: (event: CustomEvent<FormActionEventDetail>) => void;
        "onKupFormFieldBlurred"?: (event: CustomEvent<FormFieldEventDetail>) => void;
        "onKupFormFieldChanged"?: (event: CustomEvent<FormFieldEventDetail>) => void;
        "onKupFormFieldFocused"?: (event: CustomEvent<FormFieldEventDetail>) => void;
        "refid"?: string;
        "searchCallBackOnFilterSubmitted"?: (
        detail: SearchFilterSubmittedEventDetail
    ) => Promise<TableData> | undefined;
        "sections"?: FormSection;
    }
    interface KupGauge {
        /**
          * Sets how much the arc of the gauge should be thick.
          * @namespace kup-gauge.arcThickness
          * @see kup-gauge.size
         */
        "arcThickness"?: number;
        /**
          * Array of three elements to specify the color of the arcs.
         */
        "colors"?: string[];
        /**
          * Custom style of the component. For more information: https://ketchup.smeup.com/ketchup-showcase/#/customization
         */
        "customStyle"?: string;
        /**
          * The first threshold, establishing the length of the first and second arc.
         */
        "firstThreshold"?: number;
        /**
          * The distance the label and the value has from the gauge graph.
         */
        "labelDistance"?: number;
        /**
          * The maximum value reachable in the current graph.
         */
        "maxValue"?: number;
        /**
          * A string which will be appended to the displayed values of the component.
         */
        "measurementUnit"?: string;
        /**
          * The minimum value reachable in the current graph.
         */
        "minValue"?: number;
        /**
          * When true, shows a rounded needle.
         */
        "needleCircle"?: boolean;
        /**
          * When true, ignore thresholds in gauge and show colored value's arc.
         */
        "onlyValue"?: boolean;
        /**
          * When true, the colors inside the colors array are used in the reversed order.
         */
        "reverseColors"?: boolean;
        /**
          * The second threshold, establishing the length of the second and third arc.
         */
        "secondThreshold"?: number;
        /**
          * If set to false, threshold values of the gauge are not displayed.
         */
        "showLabels"?: boolean;
        /**
          * If set to false, the maximum and minimum values of the gauge are not displayed.
         */
        "showMaxmin"?: boolean;
        /**
          * If set to false, the current value of the gauge is not displayed.
         */
        "showValue"?: boolean;
        /**
          * Con be used change the viewbox of the SVG. By manipulating this value, some customizations of the aspect of the gauge is achievable.
          * @namespace kup-gauge.size
          * @see kup-gauge.arcThickness
         */
        "size"?: number;
        /**
          * The current value of the gauge. The gauge's needle points to the percentage based on this prop.
         */
        "value"?: number;
        /**
          * The current size of gauge's value. Correct values are: 0,1,2 or 3.
         */
        "valueSize"?: number;
        /**
          * Set Width gauge.
         */
        "widthComponent"?: string;
    }
    interface KupGrid {
        /**
          * The number of columns displayed by the grid, the default behavior is 12.
         */
        "columns"?: number;
        /**
          * Custom style of the component. For more information: https://ketchup.smeup.com/ketchup-showcase/#/customization
         */
        "customStyle"?: string;
        /**
          * When set to true, forces the content on a single line.
         */
        "singleLine"?: boolean;
    }
    interface KupIframe {
        /**
          * Props of the button (when isButton is set to true).
         */
        "buttonData"?: Object;
        /**
          * The component will be rendered as a button, which opens the link associated to the iframe in another tab when clicked.
         */
        "isButton"?: boolean;
        "onKupIframeError"?: (event: CustomEvent<any>) => void;
        "onKupIframeLoad"?: (event: CustomEvent<any>) => void;
        /**
          * The address the iframe should be referencing to.
         */
        "src"?: string;
    }
    interface KupImage {
        /**
          * Sets the data of badges.
          * @default null
         */
        "badgeData"?: KupBadge[];
        /**
          * The color of the icon, defaults to the CSS variable --kup-icon-color.
          * @default 'var(--kup-icon-color)'
         */
        "color"?: string;
        /**
          * Custom style of the component.
          * @default ""
          * @see https ://ketchup.smeup.com/ketchup-showcase/#/customization
         */
        "customStyle"?: string;
        /**
          * When present, the component will be drawn using CSS. Check the 'Drawing with CSS' section of the image showcase for more information.
          * @default null
         */
        "data"?: FImageData[];
        /**
          * When set to true, a spinner will be displayed until the image finished loading. Not compatible with SVGs.
          * @default false
         */
        "feedback"?: boolean;
        /**
          * The image component will create a canvas element on which it's possible to draw. It's a temporary feature that will be fully replaced by CSS drawing in the future.
          * @default false
         */
        "isCanvas"?: boolean;
        "onKupImageClick"?: (event: CustomEvent<{
        el: EventTarget;
    }>) => void;
        /**
          * The resource used to fetch the image.
          * @default null
         */
        "resource"?: string;
        /**
          * The width of the icon, defaults to 100%. Accepts any valid CSS format (px, %, vh, etc.).
          * @default '100%'
         */
        "sizeX"?: string;
        /**
          * The height of the icon, defaults to 100%. Accepts any valid CSS format (px, %, vh, etc.).
          * @default '100%'
         */
        "sizeY"?: string;
    }
    interface KupImageButton {
        /**
          * If enabled, can select one or more images
         */
        "allowMultiSelection"?: boolean;
        /**
          * urls of the images
         */
        "images"?: any;
        "onKupImageButtonSelected"?: (event: CustomEvent<{
        selectedImages: [];
    }>) => void;
        /**
          * If enabled, display the image description below the image
         */
        "showDescription"?: boolean;
        /**
          * image dimension
         */
        "size"?: number;
    }
    interface KupLayout {
        /**
          * Specifies how many columns the content must be organized onto.  If this is greater than 1, then the horizontal prop will have no effect.
         */
        "columnsNumber"?: number;
        /**
          * By default, columns size is calculated by the grid layout and it tries to give the same space to elements.  If this is true, columns width will be calculated according to the cells content. See SCSS file for more details.
         */
        "contentBasedColumnsWidth"?: boolean;
        /**
          * When true, the layout and its contents will try to take all the available horizontal space.
         */
        "fillSpace"?: boolean;
        /**
          * Tells the layout to place all elements onto a single row. It does not work when columnsNumber is greater then 1.
         */
        "horizontal"?: boolean;
    }
    interface KupLazy {
        /**
          * Sets the tag name of the component to be lazy loaded.
         */
        "componentName"?: string;
        /**
          * Custom style of the component. For more information: https://ketchup.smeup.com/ketchup-showcase/#/customization
         */
        "customStyle"?: string;
        /**
          * Sets the data of the component to be lazy loaded.
         */
        "data"?: {};
        /**
          * Displays an animated SVG placeholder until the component is loaded.
         */
        "showPlaceholder"?: boolean;
    }
    interface KupList {
        /**
          * Used to navigate the list when it's bound to a text field, i.e.: autocomplete.
         */
        "arrowDown"?: boolean;
        "arrowUp"?: boolean;
        /**
          * Custom style of the component. For more information: https://ketchup.smeup.com/ketchup-showcase/#/customization
         */
        "customStyle"?: string;
        /**
          * The data of the list.
         */
        "data"?: ComponentListElement[];
        /**
          * Selects how the items must display their label and how they can be filtered for.
         */
        "displayMode"?: ItemsDisplayMode;
        /**
          * Keeps string for filtering elements when filter mode is active
         */
        "filter"?: string;
        /**
          * Hides rows' text, ideally to display a list of icons only.
         */
        "hideText"?: boolean;
        /**
          * Defines whether the list is a menu or not.
         */
        "isMenu"?: boolean;
        /**
          * Sets the status of the menu, when false it's hidden otherwise it's visible.
         */
        "menuVisible"?: boolean;
        /**
          * Events.
         */
        "onKupListBlur"?: (event: CustomEvent<{
        selected: ComponentListElement;
        el: EventTarget;
    }>) => void;
        "onKupListChange"?: (event: CustomEvent<{
        selected: ComponentListElement;
        el: EventTarget;
    }>) => void;
        "onKupListClick"?: (event: CustomEvent<{
        selected: ComponentListElement;
        el: EventTarget;
    }>) => void;
        "onKupListFocus"?: (event: CustomEvent<{
        selected: ComponentListElement;
        el: EventTarget;
    }>) => void;
        "onKupListInput"?: (event: CustomEvent<{
        selected: ComponentListElement;
        el: EventTarget;
    }>) => void;
        /**
          * Defines the type of selection. Values accepted: listbox, radiogroup or group.
         */
        "roleType"?: string;
        /**
          * Defines whether items are selectable or not.
         */
        "selectable"?: boolean;
        /**
          * Displays the icons associated to each row when set to true.
         */
        "showIcons"?: boolean;
        /**
          * The list elements descriptions will be arranged in two lines.
         */
        "twoLine"?: boolean;
    }
    interface KupMagicBox {
        /**
          * Custom style of the component.
          * @default ""
          * @see https ://ketchup.smeup.com/ketchup-showcase/#/customization
         */
        "customStyle"?: string;
        /**
          * Sets the data that will be used to display different components.
          * @default null
         */
        "data"?: MagicBoxData;
    }
    interface KupModal {
        "header"?: string;
        "onKupModalCancel"?: (event: CustomEvent<any>) => void;
        "visible"?: boolean;
    }
    interface KupNavBar {
        /**
          * Custom style of the component. For more information: https://ketchup.smeup.com/ketchup-showcase/#/customization
         */
        "customStyle"?: string;
        /**
          * The actual data of the nav bar.
         */
        "data"?: ComponentNavBarData;
        /**
          * Defines how the bar will be displayed.
         */
        "mode"?: ComponentNavBarMode;
        "onKupNavbarMenuItemClick"?: (event: CustomEvent<{
        value: any;
    }>) => void;
        "onKupNavbarOptionItemClick"?: (event: CustomEvent<{
        value: any;
    }>) => void;
    }
    interface KupPaginator {
        "currentPage"?: number;
        "max"?: number;
        "mode"?: PaginatorMode;
        /**
          * When the current page change
         */
        "onKupPageChanged"?: (event: CustomEvent<{ newPage: number }>) => void;
        /**
          * When the rows per page change
         */
        "onKupRowsPerPageChanged"?: (event: CustomEvent<{ newRowsPerPage: number }>) => void;
        "perPage"?: number;
        "selectedPerPage"?: number;
    }
    interface KupProbe {
        /**
          * Custom style of the component.
          * @default ""
          * @see https ://ketchup.smeup.com/ketchup-showcase/#/customization
         */
        "customStyle"?: string;
        /**
          * Specify features to test.
          * @default ""
          * @see https ://ketchup.smeup.com/ketchup-showcase/#/customization
         */
        "features"?: {
        debug: boolean;
        language: boolean;
        longCycleProp: boolean;
        longCycleVar: boolean;
        objects: boolean;
        objectsFunction: boolean;
        theme: boolean;
    };
    }
    interface KupProgressBar {
        /**
          * Displays the label in the middle of the progress bar. It's the default for the radial variant and can't be changed.
         */
        "centeredLabel"?: boolean;
        /**
          * Custom style of the component. For more information: https://ketchup.smeup.com/ketchup-showcase/#/customization
         */
        "customStyle"?: string;
        /**
          * Flag to show or hide the progress bar's label.
         */
        "hideLabel"?: boolean;
        /**
          * Specifies an icon to replace the label.
         */
        "icon"?: string;
        /**
          * Radial version.
         */
        "isRadial"?: boolean;
        /**
          * Specifies a text for the bar's label.
         */
        "label"?: string;
        /**
          * The current value the progress bar must display.
         */
        "value"?: number;
    }
    interface KupQlik {
        /**
          * Set Qlik App's istance would you like to use (!!!ALLERT!!! if you have already set appid app's istance will be NOT generated again)
         */
        "app"?: any;
        /**
          * Set Qlik App's id would you like to use How to find app id --> https://support.qlik.com/articles/000026239
         */
        "appid"?: string;
        /**
          * Set gird border
         */
        "bordered"?: boolean;
        /**
          * Set Qlik Server's connection parameters MUST be delcared to open apps {host:'<server host>', port:'<server port http default:80 https default:443 >', prefix:'<virtual proxy prefix dafault: blank>', isSecure:<true/false>}
         */
        "config"?: QlikServer;
        /**
          * Activate logging Default false
         */
        "debug"?: boolean;
        /**
          * Set default obj's container pixel height
         */
        "defobjsize"?: string;
        /**
          * Define width of grid, with true width = 100% responsive, false 1200px
         */
        "fluid"?: boolean;
        /**
          * Set the grid structure (JSON) selections --> Data selection array    field   --> Qlik field on which to make the selection    values  --> Array of int or string value which to select rows    colums --> they define the structure of grid      obj     --> Qlik Object id would you like to render (How to find Qlik obj id --> https://help.qlik.com/en-US/sense-developer/June2020/Subsystems/Mashups/Content/Sense_Mashups/Howtos/mashups-obtain-app-object-id.htm)      colDim  --> define column's dimension, it could have values from 1 to 12 where 12 is 100%      size    --> define size height of obj's div container, it colud have this values XS|S|M|L|XL        noSelections --> define if selections in object are disable (default: false) Example: { selections:[  {      field: 'Anno',      values:[2020]  } ], rows:[  {    columns:[        {            obj:'KvqdmD', colDim:5, size:'L', noSelections:<true/flase>        },        {            obj:'JjSaVm', colDim:5, size:'S', noSelections:<true/flase>        }    ]  } ] }
         */
        "grid"?: Array<KupQlikGrid>;
        /**
          * Set Qlik Server istance would you like to use after connection
         */
        "qlik"?: any;
    }
    interface KupRadio {
        /**
          * Number of columns. When undefined, radio fields will be displayed inline.
         */
        "columns"?: number;
        /**
          * Custom style of the component. For more information: https://ketchup.smeup.com/ketchup-showcase/#/customization
         */
        "customStyle"?: string;
        /**
          * List of elements.
         */
        "data"?: ComponentRadioElement[];
        /**
          * Defaults at false. When set to true, the component is disabled.
         */
        "disabled"?: boolean;
        /**
          * Defaults at false. When set to true, the label will be on the left of the component.
         */
        "leadingLabel"?: boolean;
        /**
          * Defaults at null. It's the name that binds the radio buttons together.
         */
        "name"?: string;
        "onKupRadioBlur"?: (event: CustomEvent<{
        value: string;
        checked: boolean;
    }>) => void;
        "onKupRadioChange"?: (event: CustomEvent<{
        value: string;
        checked: boolean;
    }>) => void;
        "onKupRadioClick"?: (event: CustomEvent<{
        value: string;
        checked: boolean;
    }>) => void;
        "onKupRadioFocus"?: (event: CustomEvent<{
        value: string;
        checked: boolean;
    }>) => void;
        "onKupRadioInput"?: (event: CustomEvent<{
        value: string;
        checked: boolean;
    }>) => void;
    }
    interface KupRating {
        /**
          * Custom style of the component. For more information: https://ketchup.smeup.com/ketchup-showcase/#/customization
         */
        "customStyle"?: string;
        /**
          * Defaults at false. When set to true, the component is disabled.
         */
        "disabled"?: boolean;
        /**
          * Max number of stars (default 5)
         */
        "maxValue"?: number;
        "onKupRatingClicked"?: (event: CustomEvent<any>) => void;
        /**
          * Rated stars
         */
        "value"?: number;
    }
    interface KupSearch {
        "data"?: TableData;
        "disabled"?: boolean;
        "extra"?: any;
        "initialValue"?: string;
        /**
          * Fired when the filter is submitted but only if in serverHandledFilter mode.
         */
        "onKupSearchFilterSubmitted"?: (event: CustomEvent<SearchFilterSubmittedEventDetail>) => void;
        "onKupSearchSelectionUpdated"?: (event: CustomEvent<SearchSelectionUpdatedEventDetail>) => void;
        /**
          * /** Function that can be invoked when the filter is submitted, but only if in serverHandledFilter mode. It returns the items filtered.
         */
        "searchCallBackOnFilterSubmitted"?: (
        detail: SearchFilterSubmittedEventDetail
    ) => Promise<TableData> | undefined;
        /**
          * When true it emits events or makes available callbacks useful to obtain and filter data. When false the data inside data prop will be used and filtered in a static way.
         */
        "serverHandledFilter"?: boolean;
        /**
          * The field used to obtain value
         */
        "valueField"?: string;
    }
    interface KupSpinner {
        /**
          * When set to true the spinner is animating.
         */
        "active"?: boolean;
        /**
          * Decides whether the component is a bar or a spinner.
         */
        "barVariant"?: boolean;
        /**
          * Custom style of the component. For more information: https://ketchup.smeup.com/ketchup-showcase/#/customization
         */
        "customStyle"?: string;
        /**
          * Width and height of the spinner. For the bar variant, only height.
         */
        "dimensions"?: string;
        /**
          * Places a blend modal over the wrapper to darken the view (or lighten, when the theme is dark).
         */
        "fader"?: boolean;
        /**
          * The time required for the "fader" to trigger.
         */
        "faderTimeout"?: number;
        /**
          * When set to true the component will fill the whole viewport.
         */
        "fullScreen"?: boolean;
        /**
          * Sets the layout of the spinner.
         */
        "layout"?: number;
    }
    interface KupSwitch {
        /**
          * Defaults at false. When set to true, the component will be set to 'checked'.
          * @default false
         */
        "checked"?: boolean;
        /**
          * Custom style of the component.
          * @default ""
          * @see https ://ketchup.smeup.com/ketchup-showcase/#/customization
         */
        "customStyle"?: string;
        /**
          * Defaults at false. When set to true, the component is disabled.
          * @default false
         */
        "disabled"?: boolean;
        /**
          * Defaults at null. When specified, its content will be shown as a label.
          * @default null
         */
        "label"?: string;
        /**
          * Defaults at false. When set to true, the label will be on the left of the component.
          * @default false
         */
        "leadingLabel"?: boolean;
        /**
          * Triggered when the input element loses focus.
         */
        "onKupSwitchBlur"?: (event: CustomEvent<{
        value: string;
    }>) => void;
        /**
          * Triggered when the input element's value changes.
         */
        "onKupSwitchChange"?: (event: CustomEvent<{
        id: string;
        value: string;
    }>) => void;
        /**
          * Triggered when the input element gets focused.
         */
        "onKupSwitchFocus"?: (event: CustomEvent<{
        value: string;
    }>) => void;
    }
    interface KupTabBar {
        /**
          * Custom style of the component. For more information: https://ketchup.smeup.com/ketchup-showcase/#/customization
         */
        "customStyle"?: string;
        /**
          * List of elements.
         */
        "data"?: ComponentTabBarElement[];
        "onKupTabBarBlur"?: (event: CustomEvent<{
        index: number;
        el: EventTarget;
    }>) => void;
        "onKupTabBarClick"?: (event: CustomEvent<{
        id: string;
        index: number;
        el: EventTarget;
        value: string;
    }>) => void;
        "onKupTabBarFocus"?: (event: CustomEvent<{
        index: number;
        el: EventTarget;
    }>) => void;
    }
    interface KupTextField {
        /**
          * Custom style of the component.
          * @default ""
          * @see https ://ketchup.smeup.com/ketchup-showcase/#/customization
         */
        "customStyle"?: string;
        /**
          * When set to true, the component is disabled.
          * @default false
         */
        "disabled"?: boolean;
        /**
          * When the text field is part of the autocomplete component and the list is opened, enter key selects the item and doesn't submit.
          * @default true
         */
        "emitSubmitEventOnEnter"?: boolean;
        /**
          * When set to true, the component will be rendered at full width.
          * @default false
         */
        "fullWidth"?: boolean;
        /**
          * When set, its content will be shown as a help text below the field.
          * @default null
         */
        "helper"?: string;
        /**
          * When set, the helper will be shown only when the field is focused.
          * @default false
         */
        "helperWhenFocused"?: boolean;
        /**
          * When set, the text-field will show this icon.
          * @default null
         */
        "icon"?: string;
        /**
          * Sets the initial value of the component
          * @default ""
         */
        "initialValue"?: string;
        /**
          * The HTML type of the input element. It has no effect on text areas.
          * @default "text"
         */
        "inputType"?: string;
        /**
          * Enables a clear trailing icon.
          * @default false
         */
        "isClearable"?: boolean;
        /**
          * When set, its content will be shown as a label.
          * @default null
         */
        "label"?: string;
        /**
          * When set to true, the label will be on the left of the component.
          * @default false
         */
        "leadingLabel"?: boolean;
        /**
          * The HTML max attribute specifies the maximum value for the input element. Works with the following input types: number, range, date, datetime-local, month, time and week.
          * @default null
         */
        "max"?: number;
        /**
          * When set, the helper will display a character counter.
          * @default null
         */
        "maxLength"?: number;
        /**
          * The HTML min attribute specifies the minimum value for the input element. Works with the following input types: number, range, date, datetime-local, month, time and week.
          * @default null
         */
        "min"?: number;
        /**
          * Triggered when the input element loses focus.
         */
        "onKupTextFieldBlur"?: (event: CustomEvent<{
        id: any;
        value: string;
    }>) => void;
        /**
          * Triggered when the input element changes.
         */
        "onKupTextFieldChange"?: (event: CustomEvent<{
        id: any;
        value: string;
    }>) => void;
        /**
          * Triggered when the text field's clear icon is clicked.
         */
        "onKupTextFieldClearIconClick"?: (event: CustomEvent<{
        id: any;
    }>) => void;
        /**
          * Triggered when the input element is clicked.
         */
        "onKupTextFieldClick"?: (event: CustomEvent<{
        id: any;
        value: string;
    }>) => void;
        /**
          * Triggered when the input element gets focused.
         */
        "onKupTextFieldFocus"?: (event: CustomEvent<{
        id: any;
        value: string;
    }>) => void;
        /**
          * Triggered when the text field's icon is clicked.
         */
        "onKupTextFieldIconClick"?: (event: CustomEvent<{
        id: any;
        value: string;
    }>) => void;
        /**
          * Triggered when the input element receives an input.
         */
        "onKupTextFieldInput"?: (event: CustomEvent<{
        id: any;
        value: string;
    }>) => void;
        /**
          * Triggered when the Enter key is pressed.
         */
        "onKupTextFieldSubmit"?: (event: CustomEvent<{
        id: any;
        value: string;
    }>) => void;
        /**
          * When set to true, the component will be rendered as an outlined field.
          * @default false
         */
        "outlined"?: boolean;
        /**
          * Sets the component to read only state, making it not editable, but interactable. Used in combobox component when it behaves as a select.
          * @default false
         */
        "readOnly"?: boolean;
        /**
          * The HTML step of the input element. It has effect only with number input type.
          * @default null
         */
        "step"?: number;
        /**
          * When set to true, the component will be rendered as a textarea.
          * @default false
         */
        "textArea"?: boolean;
        /**
          * When set, the icon will be shown after the text.
          * @default false
         */
        "trailingIcon"?: boolean;
        /**
          * When set to true, the label will be on the right of the component.
          * @default false
         */
        "trailingLabel"?: boolean;
    }
    interface KupTextFieldNew {
        /**
          * Custom style of the component.
          * @default ""
          * @see https ://ketchup.smeup.com/ketchup-showcase/#/customization
         */
        "customStyle"?: string;
        /**
          * When set to true, the component is disabled.
          * @default false
         */
        "disabled"?: boolean;
        /**
          * When the text field is part of the autocomplete component and the list is opened, enter key selects the item and doesn't submit.
          * @default true
         */
        "emitSubmitEventOnEnter"?: boolean;
        /**
          * When set to true, the component will be rendered at full width.
          * @default false
         */
        "fullWidth"?: boolean;
        /**
          * When set, its content will be shown as a help text below the field.
          * @default null
         */
        "helper"?: string;
        /**
          * When set, the helper will be shown only when the field is focused.
          * @default false
         */
        "helperWhenFocused"?: boolean;
        /**
          * When set, the text-field will show this icon.
          * @default null
         */
        "icon"?: string;
        /**
          * Sets the initial value of the component
          * @default ""
         */
        "initialValue"?: string;
        /**
          * The HTML type of the input element. It has no effect on text areas.
          * @default "text"
         */
        "inputType"?: string;
        /**
          * Enables a clear trailing icon.
          * @default false
         */
        "isClearable"?: boolean;
        /**
          * When set, its content will be shown as a label.
          * @default null
         */
        "label"?: string;
        /**
          * When set to true, the label will be on the left of the component.
          * @default false
         */
        "leadingLabel"?: boolean;
        /**
          * The HTML max attribute specifies the maximum value for the input element. Works with the following input types: number, range, date, datetime-local, month, time and week.
          * @default null
         */
        "max"?: number;
        /**
          * When set, the helper will display a character counter.
          * @default null
         */
        "maxLength"?: number;
        /**
          * The HTML min attribute specifies the minimum value for the input element. Works with the following input types: number, range, date, datetime-local, month, time and week.
          * @default null
         */
        "min"?: number;
        /**
          * Triggered when the input element loses focus.
         */
        "onKupTextFieldBlur"?: (event: CustomEvent<{
        id: any;
        value: string;
    }>) => void;
        /**
          * Triggered when the input element changes.
         */
        "onKupTextFieldChange"?: (event: CustomEvent<{
        id: any;
        value: string;
    }>) => void;
        /**
          * Triggered when the text field's clear icon is clicked.
         */
        "onKupTextFieldClearIconClick"?: (event: CustomEvent<{
        id: any;
    }>) => void;
        /**
          * Triggered when the input element is clicked.
         */
        "onKupTextFieldClick"?: (event: CustomEvent<{
        id: any;
        value: string;
    }>) => void;
        /**
          * Triggered when the input element gets focused.
         */
        "onKupTextFieldFocus"?: (event: CustomEvent<{
        id: any;
        value: string;
    }>) => void;
        /**
          * Triggered when the text field's icon is clicked.
         */
        "onKupTextFieldIconClick"?: (event: CustomEvent<{
        id: any;
        value: string;
    }>) => void;
        /**
          * Triggered when the input element receives an input.
         */
        "onKupTextFieldInput"?: (event: CustomEvent<{
        id: any;
        value: string;
    }>) => void;
        /**
          * Triggered when the Enter key is pressed.
         */
        "onKupTextFieldSubmit"?: (event: CustomEvent<{
        id: any;
        value: string;
    }>) => void;
        /**
          * When set to true, the component will be rendered as an outlined field.
          * @default false
         */
        "outlined"?: boolean;
        /**
          * Sets the component to read only state, making it not editable, but interactable. Used in combobox component when it behaves as a select.
          * @default false
         */
        "readOnly"?: boolean;
        /**
          * The HTML step of the input element. It has effect only with number input type.
          * @default null
         */
        "step"?: number;
        /**
          * When set to true, the component will be rendered as a textarea.
          * @default false
         */
        "textArea"?: boolean;
        /**
          * When set, the icon will be shown after the text.
          * @default false
         */
        "trailingIcon"?: boolean;
        /**
          * When set to true, the label will be on the right of the component.
          * @default false
         */
        "trailingLabel"?: boolean;
    }
    interface KupTimePicker {
        /**
          * When set to true, the drop down menu will display a clock.
         */
        "clockVariant"?: boolean;
        /**
          * Custom style of the component. For more information: https://ketchup.smeup.com/ketchup-showcase/#/customization
         */
        "customStyle"?: string;
        /**
          * Props of the sub-components (time input text field)
         */
        "data"?: Object;
        /**
          * Defaults at false. When set to true, the component is disabled.
         */
        "disabled"?: boolean;
        /**
          * Sets the initial value of the component
         */
        "initialValue"?: string;
        /**
          * Manage seconds
         */
        "manageSeconds"?: boolean;
        "onKupTimePickerBlur"?: (event: CustomEvent<{
        id: any;
        value: any;
    }>) => void;
        "onKupTimePickerChange"?: (event: CustomEvent<{
        id: any;
        value: any;
    }>) => void;
        "onKupTimePickerClearIconClick"?: (event: CustomEvent<{
        id: any;
    }>) => void;
        "onKupTimePickerClick"?: (event: CustomEvent<{
        id: any;
        value: any;
    }>) => void;
        "onKupTimePickerFocus"?: (event: CustomEvent<{
        id: any;
        value: any;
    }>) => void;
        "onKupTimePickerIconClick"?: (event: CustomEvent<{
        id: any;
        value: any;
    }>) => void;
        "onKupTimePickerInput"?: (event: CustomEvent<{
        id: any;
        value: any;
    }>) => void;
        "onKupTimePickerItemClick"?: (event: CustomEvent<{
        id: any;
        value: any;
    }>) => void;
        "onKupTimePickerTextFieldSubmit"?: (event: CustomEvent<{
        id: any;
        value: any;
    }>) => void;
        /**
          * Minutes step
         */
        "timeMinutesStep"?: number;
    }
    interface KupTooltip {
        /**
          * Data for cell options
         */
        "cellOptions"?: TooltipCellOptions;
        /**
          * Data for top section
         */
        "data"?: TooltipData;
        /**
          * Data for the detail
         */
        "detailData"?: TooltipDetailData;
        /**
          * Timeout for loadDetail
         */
        "detailTimeout"?: number;
        /**
          * Layout used to display the items
         */
        "layout"?: string;
        /**
          * Timeout for tooltip
         */
        "loadTimeout"?: number;
        "onKupActionCommandClicked"?: (event: CustomEvent<{
        actionCommand: TooltipAction;
        relatedObject: TooltipRelatedObject;
    }>) => void;
        "onKupDefaultActionClicked"?: (event: CustomEvent<{
        obj: TooltipObject;
    }>) => void;
        "onKupDefaultOptionClicked"?: (event: CustomEvent<{
        obj: TooltipObject;
    }>) => void;
        "onKupDefaultPreviewClicked"?: (event: CustomEvent<{
        obj: TooltipObject;
    }>) => void;
        "onKupTooltipLoadCellOptions"?: (event: CustomEvent<{
        relatedObject: TooltipRelatedObject;
        tooltip: KupTooltip;
    }>) => void;
        "onKupTooltipLoadData"?: (event: CustomEvent<{
        relatedObject: TooltipRelatedObject;
        tooltip: KupTooltip;
    }>) => void;
        "onKupTooltipLoadDetail"?: (event: CustomEvent<{
        relatedObject: TooltipRelatedObject;
        tooltip: KupTooltip;
    }>) => void;
        "onKupTooltipTreeDynamicMassExpansion"?: (event: CustomEvent<{
        treeNodePath?: TreeNodePath;
        treeNode?: TreeNode;
        expandAll?: boolean;
    }>) => void;
        "onKupTooltipTreeNodeButtonClicked"?: (event: CustomEvent<{
        treeNodePath: TreeNodePath;
        treeNode: TreeNode;
        column: Column;
        columnName: string;
        auto: boolean;
        tree: KupTree;
    }>) => void;
        "onKupTooltipTreeNodeDblClick"?: (event: CustomEvent<{
        treeNodePath: TreeNodePath;
        treeNode: TreeNode;
    }>) => void;
        "onKupTooltipTreeNodeExpand"?: (event: CustomEvent<{
        treeNodePath: TreeNodePath;
        treeNode: TreeNode;
        usesDynamicExpansion?: boolean;
        dynamicExpansionRequireChildren?: boolean;
        tree: KupTree;
    }>) => void;
        /**
          * Fired when a node of the tree has been selected
         */
        "onKupTooltipTreeNodeSelected"?: (event: CustomEvent<{
        treeNodePath: TreeNodePath;
        treeNode: TreeNode;
        columnName: string;
        auto: boolean;
        tree: KupTree;
    }>) => void;
        /**
          * Owner of this tooltip
         */
        "owner"?: string;
        /**
          * Container element for tooltip
         */
        "relatedObject"?: TooltipRelatedObject;
    }
    interface KupTree {
        /**
          * Auto select programmatic selectic node
         */
        "autoSelectionNodeMode"?: boolean;
        /**
          * The columns of the tree when tree visualization is active.
         */
        "columns"?: Column[];
        /**
          * Custom style of the component. For more information: https://ketchup.smeup.com/ketchup-showcase/#/customization
         */
        "customStyle"?: string;
        /**
          * The json data used to populate the tree view: the basic, always visible tree nodes.
         */
        "data"?: TreeNode[];
        /**
          * The density of the rows, defaults at 'medium' and can also be set to 'dense' or 'wide'.
         */
        "density"?: string;
        /**
          * Function that gets invoked when a new set of nodes must be loaded as children of a node.  When useDynamicExpansion is set, the tree component will have two different behaviors depending on the value of this prop. 1 - If this prop is set to null, no callback to download data is available:    the component will emit an event requiring the parent to load the children of the given node. 2 - If this prop is set to have a callback, then the component will automatically make requests to load children of    a given node. After the load has been completed, a different event will be fired to alert the parent of the change.
          * @see useDynamicExpansion
         */
        "dynamicExpansionCallback"?: (
        treeNodeToExpand: TreeNode,
        treeNodePath: TreeNodePath
    ) => Promise<TreeNode[]> | undefined;
        /**
          * Enables the extracolumns add buttons.
         */
        "enableExtraColumns"?: boolean;
        /**
          * Flag: the nodes of the whole tree must be already expanded upon loading. Disabled nodes do NOT get expanded.
         */
        "expanded"?: boolean;
        /**
          * List of filters set by the user.
         */
        "filters"?: GenericFilter;
        /**
          * When set to true it activates the global filter.
         */
        "globalFilter"?: boolean;
        /**
          * The value of the global filter.
         */
        "globalFilterValue"?: string;
        "onKupAddCodeDecodeColumn"?: (event: CustomEvent<{ column: string }>) => void;
        /**
          * When 'add column' menu item is clicked
         */
        "onKupAddColumn"?: (event: CustomEvent<{ column: string }>) => void;
        "onKupDidLoad"?: (event: CustomEvent<void>) => void;
        /**
          * Triggered when stop propagation event
         */
        "onKupDidUnload"?: (event: CustomEvent<void>) => void;
        /**
          * When the column menu is being opened/closed.
         */
        "onKupTreeColumnMenu"?: (event: CustomEvent<{
        card: HTMLKupCardElement;
        open: boolean;
    }>) => void;
        /**
          * Generic right click event on tree.
         */
        "onKupTreeContextMenu"?: (event: CustomEvent<{
        details: EventHandlerDetails;
    }>) => void;
        "onKupTreeDynamicMassExpansion"?: (event: CustomEvent<{
        treeNodePath?: TreeNodePath;
        treeNode?: TreeNode;
        expandAll?: boolean;
    }>) => void;
        "onKupTreeNodeButtonClicked"?: (event: CustomEvent<{
        treeNodePath: TreeNodePath;
        treeNode: TreeNode;
        column: Column;
        columnName: string;
        auto: boolean;
        tree: KupTree;
    }>) => void;
        /**
          * Fired when a TreeNode gets collapsed (closed).
         */
        "onKupTreeNodeCollapse"?: (event: CustomEvent<{
        treeNodePath: TreeNodePath;
        treeNode: TreeNode;
        tree: KupTree;
    }>) => void;
        "onKupTreeNodeDblClick"?: (event: CustomEvent<{
        treeNodePath: TreeNodePath;
        treeNode: TreeNode;
    }>) => void;
        /**
          * Fired when a node expansion ion has been triggered. Contains additional data when the tree is using the dynamicExpansion feature.
          * @event kupTreeNodeExpand
          * @type {object}
          * @property {TreeNodePath} treeNodePath - The array of indexes to retrieve the current treeNode inside the data prop.
          * @property {TreeNode} treeNode - Reference to the TreeNode data object which is being expanded (passed through the data prop).
          * @property {boolean} usesDynamicExpansion - Flag to notify that the component is running in dynamicExpansion mode.
          * @property {boolean} dynamicExpansionRequireChildren - Flag to notify that the current dynamicExpansion event requires the parent component to add TreeNode children to the given TreeNode.
          * @see useDynamicExpansion *
          * @see dynamicExpansionCallback *
          * @since 1.0.0
         */
        "onKupTreeNodeExpand"?: (event: CustomEvent<{
        treeNodePath: TreeNodePath;
        treeNode: TreeNode;
        usesDynamicExpansion?: boolean;
        dynamicExpansionRequireChildren?: boolean;
        tree: KupTree;
    }>) => void;
        /**
          * Fired when a node of the tree has been selected
         */
        "onKupTreeNodeSelected"?: (event: CustomEvent<{
        id: string;
        treeNodePath: TreeNodePath;
        treeNode: TreeNode;
        columnName: string;
        auto: boolean;
        tree: KupTree;
    }>) => void;
        /**
          * Sets the possibility to remove the selected column.
         */
        "removableColumns"?: boolean;
        /**
          * Activates the scroll on hover function.
         */
        "scrollOnHover"?: boolean;
        /**
          * An array of integers containing the path to a selected child.\ Groups up the properties SelFirst, SelItem, SelName.
         */
        "selectedNode"?: TreeNodePath;
        /**
          * Shows the tree data as a table.
         */
        "showColumns"?: boolean;
        /**
          * When set to true enables the column filters.
         */
        "showFilters"?: boolean;
        /**
          * When set to true shows the footer.
         */
        "showFooter"?: boolean;
        /**
          * Flag: shows the header of the tree when the tree is displayed as a table.
          * @see showColumns
         */
        "showHeader"?: boolean;
        /**
          * Shows the icons of the nodes.
         */
        "showIcons"?: boolean;
        /**
          * If set to true, displays tooltip on right click; if set to false, displays tooltip on mouseOver.
         */
        "showTooltipOnRightClick"?: boolean;
        "stateId"?: string;
        "store"?: KupStore;
        /**
          * Defines the timeout for tooltip detail
         */
        "tooltipDetailTimeout"?: number;
        /**
          * Enable show tooltip
         */
        "tooltipEnabled"?: boolean;
        /**
          * Defines the timeout for tooltip load
         */
        "tooltipLoadTimeout"?: number;
        /**
          * Defines the current totals options.
         */
        "totals"?: TotalsMap;
        /**
          * When the component must use the dynamic expansion feature to open its nodes, it means that not all the nodes of the tree have been passed inside the data property.  Therefore, when expanding a node, the tree must emit an event (or run a given callback) and wait for the child nodes to be downloaded from the server.  For more information:
          * @see dynamicExpansionCallback
         */
        "useDynamicExpansion"?: boolean;
    }
    interface KupUpload {
        "onKetchupFileRejected"?: (event: CustomEvent<any>) => void;
        /**
          * Launched when file upload succeed
         */
        "onKetchupFileUploaded"?: (event: CustomEvent<any>) => void;
        "typeOptions"?: UploadProps;
    }
    interface IntrinsicElements {
        "kup-autocomplete": KupAutocomplete;
        "kup-badge": KupBadge;
        "kup-box": KupBox;
        "kup-btn": KupBtn;
        "kup-button": KupButton;
        "kup-calendar": KupCalendar;
        "kup-card": KupCard;
        "kup-chart": KupChart;
        "kup-checkbox": KupCheckbox;
        "kup-chip": KupChip;
        "kup-color-picker": KupColorPicker;
        "kup-combobox": KupCombobox;
        "kup-crud": KupCrud;
        "kup-dash": KupDash;
        "kup-dash-list": KupDashList;
        "kup-data-table": KupDataTable;
        "kup-date-picker": KupDatePicker;
        "kup-drawer": KupDrawer;
        "kup-dropdown-button": KupDropdownButton;
        "kup-echart": KupEchart;
        "kup-editor": KupEditor;
        "kup-fab": KupFab;
        "kup-field": KupField;
        "kup-form": KupForm;
        "kup-gauge": KupGauge;
        "kup-grid": KupGrid;
        "kup-iframe": KupIframe;
        "kup-image": KupImage;
        "kup-image-button": KupImageButton;
        "kup-layout": KupLayout;
        "kup-lazy": KupLazy;
        "kup-list": KupList;
        "kup-magic-box": KupMagicBox;
        "kup-modal": KupModal;
        "kup-nav-bar": KupNavBar;
        "kup-paginator": KupPaginator;
        "kup-probe": KupProbe;
        "kup-progress-bar": KupProgressBar;
        "kup-qlik": KupQlik;
        "kup-radio": KupRadio;
        "kup-rating": KupRating;
        "kup-search": KupSearch;
        "kup-spinner": KupSpinner;
        "kup-switch": KupSwitch;
        "kup-tab-bar": KupTabBar;
        "kup-text-field": KupTextField;
        "kup-text-field-new": KupTextFieldNew;
        "kup-time-picker": KupTimePicker;
        "kup-tooltip": KupTooltip;
        "kup-tree": KupTree;
        "kup-upload": KupUpload;
    }
}
export { LocalJSX as JSX };
declare module "@stencil/core" {
    export namespace JSX {
        interface IntrinsicElements {
            "kup-autocomplete": LocalJSX.KupAutocomplete & JSXBase.HTMLAttributes<HTMLKupAutocompleteElement>;
            "kup-badge": LocalJSX.KupBadge & JSXBase.HTMLAttributes<HTMLKupBadgeElement>;
            "kup-box": LocalJSX.KupBox & JSXBase.HTMLAttributes<HTMLKupBoxElement>;
            "kup-btn": LocalJSX.KupBtn & JSXBase.HTMLAttributes<HTMLKupBtnElement>;
            "kup-button": LocalJSX.KupButton & JSXBase.HTMLAttributes<HTMLKupButtonElement>;
            "kup-calendar": LocalJSX.KupCalendar & JSXBase.HTMLAttributes<HTMLKupCalendarElement>;
            "kup-card": LocalJSX.KupCard & JSXBase.HTMLAttributes<HTMLKupCardElement>;
            "kup-chart": LocalJSX.KupChart & JSXBase.HTMLAttributes<HTMLKupChartElement>;
            "kup-checkbox": LocalJSX.KupCheckbox & JSXBase.HTMLAttributes<HTMLKupCheckboxElement>;
            "kup-chip": LocalJSX.KupChip & JSXBase.HTMLAttributes<HTMLKupChipElement>;
            "kup-color-picker": LocalJSX.KupColorPicker & JSXBase.HTMLAttributes<HTMLKupColorPickerElement>;
            "kup-combobox": LocalJSX.KupCombobox & JSXBase.HTMLAttributes<HTMLKupComboboxElement>;
            "kup-crud": LocalJSX.KupCrud & JSXBase.HTMLAttributes<HTMLKupCrudElement>;
            "kup-dash": LocalJSX.KupDash & JSXBase.HTMLAttributes<HTMLKupDashElement>;
            "kup-dash-list": LocalJSX.KupDashList & JSXBase.HTMLAttributes<HTMLKupDashListElement>;
            "kup-data-table": LocalJSX.KupDataTable & JSXBase.HTMLAttributes<HTMLKupDataTableElement>;
            "kup-date-picker": LocalJSX.KupDatePicker & JSXBase.HTMLAttributes<HTMLKupDatePickerElement>;
            "kup-drawer": LocalJSX.KupDrawer & JSXBase.HTMLAttributes<HTMLKupDrawerElement>;
            "kup-dropdown-button": LocalJSX.KupDropdownButton & JSXBase.HTMLAttributes<HTMLKupDropdownButtonElement>;
            "kup-echart": LocalJSX.KupEchart & JSXBase.HTMLAttributes<HTMLKupEchartElement>;
            "kup-editor": LocalJSX.KupEditor & JSXBase.HTMLAttributes<HTMLKupEditorElement>;
            "kup-fab": LocalJSX.KupFab & JSXBase.HTMLAttributes<HTMLKupFabElement>;
            "kup-field": LocalJSX.KupField & JSXBase.HTMLAttributes<HTMLKupFieldElement>;
            "kup-form": LocalJSX.KupForm & JSXBase.HTMLAttributes<HTMLKupFormElement>;
            "kup-gauge": LocalJSX.KupGauge & JSXBase.HTMLAttributes<HTMLKupGaugeElement>;
            "kup-grid": LocalJSX.KupGrid & JSXBase.HTMLAttributes<HTMLKupGridElement>;
            "kup-iframe": LocalJSX.KupIframe & JSXBase.HTMLAttributes<HTMLKupIframeElement>;
            "kup-image": LocalJSX.KupImage & JSXBase.HTMLAttributes<HTMLKupImageElement>;
            "kup-image-button": LocalJSX.KupImageButton & JSXBase.HTMLAttributes<HTMLKupImageButtonElement>;
            "kup-layout": LocalJSX.KupLayout & JSXBase.HTMLAttributes<HTMLKupLayoutElement>;
            "kup-lazy": LocalJSX.KupLazy & JSXBase.HTMLAttributes<HTMLKupLazyElement>;
            "kup-list": LocalJSX.KupList & JSXBase.HTMLAttributes<HTMLKupListElement>;
            "kup-magic-box": LocalJSX.KupMagicBox & JSXBase.HTMLAttributes<HTMLKupMagicBoxElement>;
            "kup-modal": LocalJSX.KupModal & JSXBase.HTMLAttributes<HTMLKupModalElement>;
            "kup-nav-bar": LocalJSX.KupNavBar & JSXBase.HTMLAttributes<HTMLKupNavBarElement>;
            "kup-paginator": LocalJSX.KupPaginator & JSXBase.HTMLAttributes<HTMLKupPaginatorElement>;
            "kup-probe": LocalJSX.KupProbe & JSXBase.HTMLAttributes<HTMLKupProbeElement>;
            "kup-progress-bar": LocalJSX.KupProgressBar & JSXBase.HTMLAttributes<HTMLKupProgressBarElement>;
            "kup-qlik": LocalJSX.KupQlik & JSXBase.HTMLAttributes<HTMLKupQlikElement>;
            "kup-radio": LocalJSX.KupRadio & JSXBase.HTMLAttributes<HTMLKupRadioElement>;
            "kup-rating": LocalJSX.KupRating & JSXBase.HTMLAttributes<HTMLKupRatingElement>;
            "kup-search": LocalJSX.KupSearch & JSXBase.HTMLAttributes<HTMLKupSearchElement>;
            "kup-spinner": LocalJSX.KupSpinner & JSXBase.HTMLAttributes<HTMLKupSpinnerElement>;
            "kup-switch": LocalJSX.KupSwitch & JSXBase.HTMLAttributes<HTMLKupSwitchElement>;
            "kup-tab-bar": LocalJSX.KupTabBar & JSXBase.HTMLAttributes<HTMLKupTabBarElement>;
            "kup-text-field": LocalJSX.KupTextField & JSXBase.HTMLAttributes<HTMLKupTextFieldElement>;
            "kup-text-field-new": LocalJSX.KupTextFieldNew & JSXBase.HTMLAttributes<HTMLKupTextFieldNewElement>;
            "kup-time-picker": LocalJSX.KupTimePicker & JSXBase.HTMLAttributes<HTMLKupTimePickerElement>;
            "kup-tooltip": LocalJSX.KupTooltip & JSXBase.HTMLAttributes<HTMLKupTooltipElement>;
            "kup-tree": LocalJSX.KupTree & JSXBase.HTMLAttributes<HTMLKupTreeElement>;
            "kup-upload": LocalJSX.KupUpload & JSXBase.HTMLAttributes<HTMLKupUploadElement>;
        }
    }
}
